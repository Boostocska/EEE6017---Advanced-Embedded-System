

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri May 05 14:07:10 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    38                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    39   000000                     
    40                           ; Version 2.40
    41                           ; Generated 17/11/2021 GMT
    42                           ; 
    43                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution. Publication is not required when
    57                           ;        this file is used in an embedded application.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F452 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75   000000                     
    76                           	psect	smallconst
    77   000600                     __psmallconst:
    78                           	callstack 0
    79   000600  00                 	db	0
    80   000601                     _keypad:
    81                           	callstack 0
    82   000601  01                 	db	1
    83   000602  02                 	db	2
    84   000603  03                 	db	3
    85   000604  41                 	db	65
    86   000605  04                 	db	4
    87   000606  05                 	db	5
    88   000607  06                 	db	6
    89   000608  42                 	db	66
    90   000609  07                 	db	7
    91   00060A  08                 	db	8
    92   00060B  09                 	db	9
    93   00060C  43                 	db	67
    94   00060D  2A                 	db	42
    95   00060E  30                 	db	48
    96   00060F  23                 	db	35
    97   000610  44                 	db	68
    98   000611                     __end_of_keypad:
    99                           	callstack 0
   100   000611  01DB               	dw	475
   101   000613                     __end_of_PWM_OPEN:
   102                           	callstack 0
   103   000613  00FA               	dw	250
   104   000615                     __end_of_PWM_CLOSE:
   105                           	callstack 0
   106   000615                     _resetCode:
   107                           	callstack 0
   108   000615  05                 	db	5
   109   000616  04                 	db	4
   110   000617  03                 	db	3
   111   000618  02                 	db	2
   112   000619  01                 	db	1
   113   00061A                     __end_of_resetCode:
   114                           	callstack 0
   115   00061A                     _activationCode:
   116                           	callstack 0
   117   00061A  01                 	db	1
   118   00061B  02                 	db	2
   119   00061C  03                 	db	3
   120   00061D  04                 	db	4
   121   00061E  05                 	db	5
   122   00061F                     __end_of_activationCode:
   123                           	callstack 0
   124   000000                     _INTCON3	set	4080
   125   000000                     _INTCON2	set	4081
   126   000000                     _INTCON	set	4082
   127   000000                     _PORTB	set	3969
   128   000000                     _TRISB	set	3987
   129   000000                     _PORTA	set	3968
   130   000000                     _TRISA	set	3986
   131   000000                     _TRISC6	set	31910
   132   000000                     _TRISD4	set	31916
   133   000000                     _RC5	set	31765
   134   000000                     _PORTCbits	set	3970
   135   000000                     _PORTDbits	set	3971
   136   000000                     _PORTD	set	3971
   137   000000                     _PORTC	set	3970
   138   000000                     _TRISD	set	3989
   139   000000                     _TRISC	set	3988
   140   000000                     _RC6	set	31766
   141   000000                     _RC7	set	31767
   142   000000                     _RD4	set	31772
   143   000000                     _RD2	set	31770
   144   000000                     _RC4	set	31764
   145   000000                     _CCP2CONbits	set	4026
   146   000000                     _T0CONbits	set	4053
   147   000000                     _INTCONbits	set	4082
   148   000000                     _CCP2CON	set	4026
   149   000000                     _T2CON	set	4042
   150   000000                     _T1CON	set	4045
   151   000000                     _T0CON	set	4053
   152   000000                     _RD3	set	31771
   153   000000                     _RCON	set	4048
   154   000000                     _PR2	set	4043
   155   000000                     _CCPR2L	set	4027
   156   00061F                     STR_3:
   157   00061F  4E                 	db	78	;'N'
   158   000620  6F                 	db	111	;'o'
   159   000621  20                 	db	32
   160   000622  45                 	db	69	;'E'
   161   000623  52                 	db	82	;'R'
   162   000624  3A                 	db	58	;':'
   163   000625  44                 	db	68	;'D'
   164   000626  65                 	db	101	;'e'
   165   000627  61                 	db	97	;'a'
   166   000628  63                 	db	99	;'c'
   167   000629  74                 	db	116	;'t'
   168   00062A  69                 	db	105	;'i'
   169   00062B  76                 	db	118	;'v'
   170   00062C  61                 	db	97	;'a'
   171   00062D  74                 	db	116	;'t'
   172   00062E  65                 	db	101	;'e'
   173   00062F  00                 	db	0
   174   000630                     STR_13:
   175   000630  39                 	db	57	;'9'
   176   000631  39                 	db	57	;'9'
   177   000632  3A                 	db	58	;':'
   178   000633  20                 	db	32
   179   000634  47                 	db	71	;'G'
   180   000635  61                 	db	97	;'a'
   181   000636  74                 	db	116	;'t'
   182   000637  65                 	db	101	;'e'
   183   000638  20                 	db	32
   184   000639  4F                 	db	79	;'O'
   185   00063A  70                 	db	112	;'p'
   186   00063B  65                 	db	101	;'e'
   187   00063C  6E                 	db	110	;'n'
   188   00063D  00                 	db	0
   189   00063E                     STR_12:
   190   00063E  47                 	db	71	;'G'
   191   00063F  61                 	db	97	;'a'
   192   000640  74                 	db	116	;'t'
   193   000641  65                 	db	101	;'e'
   194   000642  20                 	db	32
   195   000643  4F                 	db	79	;'O'
   196   000644  70                 	db	112	;'p'
   197   000645  65                 	db	101	;'e'
   198   000646  6E                 	db	110	;'n'
   199   000647  65                 	db	101	;'e'
   200   000648  64                 	db	100	;'d'
   201   000649  00                 	db	0
   202   00064A                     STR_11:
   203   00064A  47                 	db	71	;'G'
   204   00064B  61                 	db	97	;'a'
   205   00064C  74                 	db	116	;'t'
   206   00064D  65                 	db	101	;'e'
   207   00064E  20                 	db	32
   208   00064F  43                 	db	67	;'C'
   209   000650  6C                 	db	108	;'l'
   210   000651  6F                 	db	111	;'o'
   211   000652  73                 	db	115	;'s'
   212   000653  65                 	db	101	;'e'
   213   000654  64                 	db	100	;'d'
   214   000655  00                 	db	0
   215   000656                     STR_4:
   216   000656  44                 	db	68	;'D'
   217   000657  65                 	db	101	;'e'
   218   000658  61                 	db	97	;'a'
   219   000659  63                 	db	99	;'c'
   220   00065A  74                 	db	116	;'t'
   221   00065B  69                 	db	105	;'i'
   222   00065C  76                 	db	118	;'v'
   223   00065D  61                 	db	97	;'a'
   224   00065E  74                 	db	116	;'t'
   225   00065F  65                 	db	101	;'e'
   226   000660  64                 	db	100	;'d'
   227   000661  00                 	db	0
   228   000662                     STR_10:
   229   000662  41                 	db	65	;'A'
   230   000663  63                 	db	99	;'c'
   231   000664  74                 	db	116	;'t'
   232   000665  69                 	db	105	;'i'
   233   000666  76                 	db	118	;'v'
   234   000667  61                 	db	97	;'a'
   235   000668  74                 	db	116	;'t'
   236   000669  65                 	db	101	;'e'
   237   00066A  64                 	db	100	;'d'
   238   00066B  00                 	db	0
   239   00066C                     STR_15:
   240   00066C  43                 	db	67	;'C'
   241   00066D  6C                 	db	108	;'l'
   242   00066E  6F                 	db	111	;'o'
   243   00066F  73                 	db	115	;'s'
   244   000670  65                 	db	101	;'e'
   245   000671  00                 	db	0
   246   000672  25                 	db	37
   247   000673  64                 	db	100	;'d'
   248   000674  00                 	db	0
   249   000675  25                 	db	37
   250   000676  66                 	db	102	;'f'
   251   000677  00                 	db	0
   252   000678                     STR_7:
   253   000678  20                 	db	32
   254   000679  00                 	db	0
   255   00067A  00                 	db	0	; dummy byte at the end
   256   000000                     
   257                           ; #config settings
   258                           
   259                           	psect	cinit
   260   001596                     __pcinit:
   261                           	callstack 0
   262   001596                     start_initialization:
   263                           	callstack 0
   264   001596                     __initialization:
   265                           	callstack 0
   266                           
   267                           ; Clear objects allocated to COMRAM (6 bytes)
   268   001596  6A35               	clrf	(__pbssCOMRAM+5)& (0+255),c
   269   001598  6A34               	clrf	(__pbssCOMRAM+4)& (0+255),c
   270   00159A  6A33               	clrf	(__pbssCOMRAM+3)& (0+255),c
   271   00159C  6A32               	clrf	(__pbssCOMRAM+2)& (0+255),c
   272   00159E  6A31               	clrf	(__pbssCOMRAM+1)& (0+255),c
   273   0015A0  6A30               	clrf	__pbssCOMRAM& (0+255),c
   274   0015A2                     end_of_initialization:
   275                           	callstack 0
   276   0015A2                     __end_of__initialization:
   277                           	callstack 0
   278   0015A2  9036               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   279   0015A4  9236               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   280   0015A6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   281   0015A8  6EF8               	movwf	tblptru,c
   282   0015AA  0100               	movlb	0
   283   0015AC  EF3E  F003         	goto	_main	;jump to C main() function
   284                           
   285                           	psect	bssCOMRAM
   286   000030                     __pbssCOMRAM:
   287                           	callstack 0
   288   000030                     _preciseTimer:
   289                           	callstack 0
   290   000030                     	ds	4
   291   000034                     _currentState:
   292                           	callstack 0
   293   000034                     	ds	1
   294   000035                     _gateState:
   295                           	callstack 0
   296   000035                     	ds	1
   297                           
   298                           	psect	cstackCOMRAM
   299   000001                     __pcstackCOMRAM:
   300                           	callstack 0
   301   000001                     ??i2_toggleBuzzer:
   302                           
   303                           ; 1 bytes @ 0x0
   304   000001                     	ds	1
   305   000002                     i2toggleBuzzer@isEmergency:
   306                           	callstack 0
   307                           
   308                           ; 1 bytes @ 0x1
   309   000002                     	ds	1
   310   000003                     ??_toggleBuzzer:
   311   000003                     ??_keypadPolling:
   312   000003                     LCD_DATA@Data:
   313                           	callstack 0
   314   000003                     pwmSet@duty:
   315                           	callstack 0
   316                           
   317                           ; 2 bytes @ 0x2
   318   000003                     	ds	1
   319   000004                     LCD_CMD@CMD:
   320                           	callstack 0
   321   000004                     LCD_Write_Char@Low4:
   322                           	callstack 0
   323   000004                     toggleBuzzer@isEmergency:
   324                           	callstack 0
   325                           
   326                           ; 1 bytes @ 0x3
   327   000004                     	ds	1
   328   000005                     ??_pwmSet:
   329   000005                     ??_LCD_Clear:
   330   000005                     ??_LCD_Init:
   331   000005                     LCD_Set_Cursor@c:
   332                           	callstack 0
   333   000005                     LCD_Write_Char@High4:
   334                           	callstack 0
   335                           
   336                           ; 1 bytes @ 0x4
   337   000005                     	ds	1
   338   000006                     LCD_Set_Cursor@r:
   339                           	callstack 0
   340   000006                     LCD_Write_Char@Data:
   341                           	callstack 0
   342                           
   343                           ; 1 bytes @ 0x5
   344   000006                     	ds	1
   345   000007                     LCD_Set_Cursor@Low4:
   346                           	callstack 0
   347   000007                     keypadPolling@keyDetected:
   348                           	callstack 0
   349   000007                     LCD_Write_String@str:
   350                           	callstack 0
   351                           
   352                           ; 2 bytes @ 0x6
   353   000007                     	ds	1
   354   000008                     LCD_Set_Cursor@High4:
   355                           	callstack 0
   356   000008                     keypadPolling@pressedKey:
   357                           	callstack 0
   358                           
   359                           ; 1 bytes @ 0x7
   360   000008                     	ds	1
   361   000009                     ??_LCD_Write_String:
   362   000009                     LCD_Set_Cursor@Temp:
   363                           	callstack 0
   364   000009                     keypadPolling@i:
   365                           	callstack 0
   366                           
   367                           ; 2 bytes @ 0x8
   368   000009                     	ds	2
   369   00000B                     LCD_Write_String@i:
   370                           	callstack 0
   371   00000B                     keypadPolling@j:
   372                           	callstack 0
   373                           
   374                           ; 2 bytes @ 0xA
   375   00000B                     	ds	2
   376   00000D                     handleGate@isOpen:
   377                           	callstack 0
   378   00000D                     readMatchCode@codeToMatch:
   379                           	callstack 0
   380                           
   381                           ; 2 bytes @ 0xC
   382   00000D                     	ds	2
   383   00000F                     handleGate@callback:
   384                           	callstack 0
   385   00000F                     readMatchCode@isEnabled:
   386                           	callstack 0
   387                           
   388                           ; 2 bytes @ 0xE
   389   00000F                     	ds	2
   390   000011                     ??_readMatchCode:
   391   000011                     ??_handleGate:
   392                           
   393                           ; 1 bytes @ 0x10
   394   000011                     	ds	1
   395   000012                     handleGate@toOpen:
   396                           	callstack 0
   397                           
   398                           ; 1 bytes @ 0x11
   399   000012                     	ds	1
   400   000013                     handleGate@i:
   401                           	callstack 0
   402   000013                     readMatchCode@codePosition:
   403                           	callstack 0
   404                           
   405                           ; 2 bytes @ 0x12
   406   000013                     	ds	2
   407   000015                     readMatchCode@pressedKey:
   408                           	callstack 0
   409   000015                     handleGate@i_473:
   410                           	callstack 0
   411                           
   412                           ; 2 bytes @ 0x14
   413   000015                     	ds	2
   414   000017                     setState@targetState:
   415                           	callstack 0
   416                           
   417                           ; 2 bytes @ 0x16
   418   000017                     	ds	2
   419   000019                     ??_setState:
   420                           
   421                           ; 1 bytes @ 0x18
   422   000019                     	ds	2
   423   00001B                     ??_main:
   424                           
   425                           ; 1 bytes @ 0x1A
   426   00001B                     	ds	2
   427   00001D                     main@isRstBtnPressed:
   428                           	callstack 0
   429                           
   430                           ; 1 bytes @ 0x1C
   431   00001D                     	ds	1
   432   00001E                     main@matchCodeResponse_431:
   433                           	callstack 0
   434                           
   435                           ; 1 bytes @ 0x1D
   436   00001E                     	ds	1
   437   00001F                     main@i_423:
   438                           	callstack 0
   439                           
   440                           ; 2 bytes @ 0x1E
   441   00001F                     	ds	2
   442   000021                     main@matchCodeResponse:
   443                           	callstack 0
   444                           
   445                           ; 1 bytes @ 0x20
   446   000021                     	ds	1
   447   000022                     main@matchCodeResponse_425:
   448                           	callstack 0
   449                           
   450                           ; 1 bytes @ 0x21
   451   000022                     	ds	1
   452   000023                     main@i:
   453                           	callstack 0
   454                           
   455                           ; 2 bytes @ 0x22
   456   000023                     	ds	2
   457   000025                     main@i_424:
   458                           	callstack 0
   459                           
   460                           ; 2 bytes @ 0x24
   461   000025                     	ds	2
   462   000027                     main@i_427:
   463                           	callstack 0
   464                           
   465                           ; 2 bytes @ 0x26
   466   000027                     	ds	2
   467   000029                     main@i_428:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0x28
   471   000029                     	ds	2
   472   00002B                     main@isRstBtnPressedPtr:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x2A
   476   00002B                     	ds	2
   477   00002D                     main@isSysBtnPressedPtr:
   478                           	callstack 0
   479                           
   480                           ; 2 bytes @ 0x2C
   481   00002D                     	ds	2
   482   00002F                     main@isSysBtnPressed:
   483                           	callstack 0
   484                           
   485                           ; 1 bytes @ 0x2E
   486   00002F                     	ds	1
   487                           
   488 ;;
   489 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   490 ;;
   491 ;; *************** function _main *****************
   492 ;; Defined at:
   493 ;;		line 111 in file "main.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;		None
   496 ;; Auto vars:     Size  Location     Type
   497 ;;  i               2   40[COMRAM] int 
   498 ;;  i               2   38[COMRAM] int 
   499 ;;  matchCodeRes    1   33[COMRAM] unsigned char 
   500 ;;  i               2   36[COMRAM] int 
   501 ;;  i               2   34[COMRAM] int 
   502 ;;  isRstBtnPres    2   42[COMRAM] PTR _Bool 
   503 ;;		 -> NULL(0), main@isRstBtnPressed(1), main@isSysBtnPressed(1), 
   504 ;;  matchCodeRes    1   29[COMRAM] unsigned char 
   505 ;;  isRstBtnPres    1   28[COMRAM] _Bool 
   506 ;;  i               2   30[COMRAM] int 
   507 ;;  matchCodeRes    1   32[COMRAM] unsigned char 
   508 ;;  isSysBtnPres    2   44[COMRAM] PTR _Bool 
   509 ;;		 -> NULL(0), main@isRstBtnPressed(1), main@isSysBtnPressed(1), 
   510 ;;  isSysBtnPres    1   46[COMRAM] _Bool 
   511 ;; Return value:  Size  Location     Type
   512 ;;                  1    wreg      void 
   513 ;; Registers used:
   514 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, tblptrl, tblptrh, tblptru, cstack
   515 ;; Tracked objects:
   516 ;;		On entry : 0/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   520 ;;      Params:         0       0       0       0       0       0       0
   521 ;;      Locals:        19       0       0       0       0       0       0
   522 ;;      Temps:          2       0       0       0       0       0       0
   523 ;;      Totals:        21       0       0       0       0       0       0
   524 ;;Total ram usage:       21 bytes
   525 ;; Hardware stack levels required when called: 9
   526 ;; This function calls:
   527 ;;		_LCD_Clear
   528 ;;		_LCD_Set_Cursor
   529 ;;		_LCD_Write_Char
   530 ;;		_LCD_Write_String
   531 ;;		_erPolling
   532 ;;		_init
   533 ;;		_pirPolling
   534 ;;		_readMatchCode
   535 ;;		_rstBtnPolling
   536 ;;		_setState
   537 ;;		_sysBtnPolling
   538 ;; This function is called by:
   539 ;;		Startup code after reset
   540 ;; This function uses a non-reentrant model
   541 ;;
   542                           
   543                           	psect	text0
   544   00067C                     __ptext0:
   545                           	callstack 0
   546   00067C                     _main:
   547                           	callstack 22
   548   00067C  FFFF               	dw	65535	; assembler added errata NOP
   549                           
   550                           ;main.c: 112:     init();
   551   00067E  EC8D  F009         	call	_init	;wreg free
   552   000682                     l1850:
   553   000682  FFFF               	dw	65535	; assembler added errata NOP
   554                           
   555                           ;main.c: 115:         Bool isSysBtnPressed = 0;
   556   000684  0E00               	movlw	0
   557   000686  6E2F               	movwf	main@isSysBtnPressed^0,c
   558   000688                     
   559                           ;main.c: 116:         Bool* isSysBtnPressedPtr = &isSysBtnPressed;
   560   000688  0E2F               	movlw	low main@isSysBtnPressed
   561   00068A  6E2D               	movwf	main@isSysBtnPressedPtr^0,c
   562   00068C  0E00               	movlw	high main@isSysBtnPressed
   563   00068E  6E2E               	movwf	(main@isSysBtnPressedPtr+1)^0,c
   564                           
   565                           ;main.c: 117:         switch(currentState){
   566   000690  EFE6  F005         	goto	l2048
   567   000694                     l1854:
   568   000694  FFFF               	dw	65535	; assembler added errata NOP
   569                           
   570                           ;main.c: 124:                     for(int i = 0; i < 3000; i += 50){
   571   000696  0E00               	movlw	0
   572   000698  6E24               	movwf	(main@i+1)^0,c
   573   00069A  0E00               	movlw	0
   574   00069C  6E23               	movwf	main@i^0,c
   575   00069E                     l1860:
   576   00069E  FFFF               	dw	65535	; assembler added errata NOP
   577                           
   578                           ;main.c: 125:                         if(erPolling()){
   579   0006A0  EC6B  F00A         	call	_erPolling	;wreg free
   580   0006A4  0900               	iorlw	0
   581   0006A6  B4D8               	btfsc	status,2,c
   582   0006A8  EF58  F003         	goto	u961
   583   0006AC  EF5B  F003         	goto	u960
   584   0006B0                     u961:
   585   0006B0  FFFF               	dw	65535	; assembler added errata NOP
   586   0006B2  EF7B  F003         	goto	l1872
   587   0006B6                     u960:
   588   0006B6  FFFF               	dw	65535	; assembler added errata NOP
   589   0006B8                     
   590                           ;main.c: 126:                             LCD_Set_Cursor(1,1);
   591   0006B8  0E01               	movlw	1
   592   0006BA  6E05               	movwf	LCD_Set_Cursor@c^0,c
   593   0006BC  0E01               	movlw	1
   594   0006BE  EC54  F009         	call	_LCD_Set_Cursor
   595   0006C2                     
   596                           ;main.c: 127:                             LCD_Write_String("No ER:Deactivate");
   597   0006C2  0E1F               	movlw	low STR_3
   598   0006C4  6E07               	movwf	LCD_Write_String@str^0,c
   599   0006C6  0E06               	movlw	high STR_3
   600   0006C8  6E08               	movwf	(LCD_Write_String@str+1)^0,c
   601   0006CA  EC8D  F008         	call	_LCD_Write_String	;wreg free
   602   0006CE                     
   603                           ;main.c: 128:                             _delay((unsigned long)((3000)*(4000000/4000.0)
      +                          ));
   604   0006CE  0E0C               	movlw	12
   605   0006D0  6E1C               	movwf	(??_main+1)^0,c
   606   0006D2  0E6C               	movlw	108
   607   0006D4  6E1B               	movwf	??_main^0,c
   608   0006D6  0EF3               	movlw	243
   609   0006D8                     u1257:
   610   0006D8  FFFF               	dw	65535	; errata NOP
   611   0006DA  2EE8               	decfsz	wreg,f,c
   612   0006DC  D7FD               	bra	u1257
   613   0006DE  2E1B               	decfsz	??_main^0,f,c
   614   0006E0  D7FB               	bra	u1257
   615   0006E2  2E1C               	decfsz	(??_main+1)^0,f,c
   616   0006E4  D7F9               	bra	u1257
   617   0006E6                     
   618                           ;main.c: 129:                             LCD_Clear();
   619   0006E6  EC8F  F00A         	call	_LCD_Clear	;wreg free
   620   0006EA                     
   621                           ;main.c: 130:                             LCD_Write_String("Deactivated");
   622   0006EA  0E56               	movlw	low STR_4
   623   0006EC  6E07               	movwf	LCD_Write_String@str^0,c
   624   0006EE  0E06               	movlw	high STR_4
   625   0006F0  6E08               	movwf	(LCD_Write_String@str+1)^0,c
   626   0006F2  EC8D  F008         	call	_LCD_Write_String	;wreg free
   627   0006F6                     l1872:
   628   0006F6  FFFF               	dw	65535	; assembler added errata NOP
   629                           
   630                           ;main.c: 132:                         if(!sysBtnPolling()){
   631   0006F8  EC47  F00A         	call	_sysBtnPolling	;wreg free
   632   0006FC  0900               	iorlw	0
   633   0006FE  A4D8               	btfss	status,2,c
   634   000700  EF84  F003         	goto	u971
   635   000704  EF87  F003         	goto	u970
   636   000708                     u971:
   637   000708  FFFF               	dw	65535	; assembler added errata NOP
   638   00070A  EF8C  F003         	goto	l1876
   639   00070E                     u970:
   640   00070E  FFFF               	dw	65535	; assembler added errata NOP
   641   000710                     
   642                           ;main.c: 133:                             i = 0;
   643   000710  0E00               	movlw	0
   644   000712  6E24               	movwf	(main@i+1)^0,c
   645   000714  0E00               	movlw	0
   646   000716  6E23               	movwf	main@i^0,c
   647   000718                     l1876:
   648   000718  FFFF               	dw	65535	; assembler added errata NOP
   649                           
   650                           ;main.c: 135:                         _delay((unsigned long)((50)*(4000000/4000.0)));
   651   00071A  0E31               	movlw	49
   652   00071C  6E1B               	movwf	??_main^0,c
   653   00071E  0EBB               	movlw	187
   654   000720                     u1267:
   655   000720  FFFF               	dw	65535	; errata NOP
   656   000722  2EE8               	decfsz	wreg,f,c
   657   000724  D7FD               	bra	u1267
   658   000726  2E1B               	decfsz	??_main^0,f,c
   659   000728  D7FB               	bra	u1267
   660   00072A                     
   661                           ;main.c: 136:                     }
   662   00072A  0E32               	movlw	50
   663   00072C  2623               	addwf	main@i^0,f,c
   664   00072E  0E00               	movlw	0
   665   000730  2224               	addwfc	(main@i+1)^0,f,c
   666   000732  BE24               	btfsc	(main@i+1)^0,7,c
   667   000734  EFA5  F003         	goto	u981
   668   000738  0EB8               	movlw	184
   669   00073A  5C23               	subwf	main@i^0,w,c
   670   00073C  0E0B               	movlw	11
   671   00073E  5824               	subwfb	(main@i+1)^0,w,c
   672   000740  A0D8               	btfss	status,0,c
   673   000742  EFA5  F003         	goto	u981
   674   000746  EFA8  F003         	goto	u980
   675   00074A                     u981:
   676   00074A  FFFF               	dw	65535	; assembler added errata NOP
   677   00074C  EF4F  F003         	goto	l1860
   678   000750                     u980:
   679   000750  FFFF               	dw	65535	; assembler added errata NOP
   680   000752                     
   681                           ;main.c: 137:                     LCD_Set_Cursor(2,16);
   682   000752  0E10               	movlw	16
   683   000754  6E05               	movwf	LCD_Set_Cursor@c^0,c
   684   000756  0E02               	movlw	2
   685   000758  EC54  F009         	call	_LCD_Set_Cursor
   686                           
   687                           ;main.c: 138:                     LCD_Write_Char(0xFF);
   688   00075C  0EFF               	movlw	255
   689   00075E  EC08  F00A         	call	_LCD_Write_Char
   690   000762                     
   691                           ;main.c: 139:                     isSysBtnPressed = 1;
   692   000762  0E01               	movlw	1
   693   000764  6E2F               	movwf	main@isSysBtnPressed^0,c
   694   000766                     l1886:
   695   000766  FFFF               	dw	65535	; assembler added errata NOP
   696                           
   697                           ;main.c: 123:                 while(!isSysBtnPressed){
   698   000768  502F               	movf	main@isSysBtnPressed^0,w,c
   699   00076A  B4D8               	btfsc	status,2,c
   700   00076C  EFBA  F003         	goto	u991
   701   000770  EFBD  F003         	goto	u990
   702   000774                     u991:
   703   000774  FFFF               	dw	65535	; assembler added errata NOP
   704   000776  EF4A  F003         	goto	l1854
   705   00077A                     u990:
   706   00077A  FFFF               	dw	65535	; assembler added errata NOP
   707   00077C                     
   708                           ;main.c: 141:                 char matchCodeResponse = readMatchCode(activationCode, &is
      +                          SysBtnPressedPtr);
   709   00077C  0E1A               	movlw	low _activationCode
   710   00077E  6E0D               	movwf	readMatchCode@codeToMatch^0,c
   711   000780  0E06               	movlw	high _activationCode
   712   000782  6E0E               	movwf	(readMatchCode@codeToMatch+1)^0,c
   713   000784  0E2D               	movlw	low main@isSysBtnPressedPtr
   714   000786  6E0F               	movwf	readMatchCode@isEnabled^0,c
   715   000788  0E00               	movlw	high main@isSysBtnPressedPtr
   716   00078A  6E10               	movwf	(readMatchCode@isEnabled+1)^0,c
   717   00078C  EC7E  F007         	call	_readMatchCode	;wreg free
   718   000790  6E21               	movwf	main@matchCodeResponse^0,c
   719   000792                     
   720                           ;main.c: 142:                 if(matchCodeResponse == 2){
   721   000792  0E02               	movlw	2
   722   000794  1821               	xorwf	main@matchCodeResponse^0,w,c
   723   000796  A4D8               	btfss	status,2,c
   724   000798  EFD0  F003         	goto	u1001
   725   00079C  EFD3  F003         	goto	u1000
   726   0007A0                     u1001:
   727   0007A0  FFFF               	dw	65535	; assembler added errata NOP
   728   0007A2  EFF5  F003         	goto	l1902
   729   0007A6                     u1000:
   730   0007A6  FFFF               	dw	65535	; assembler added errata NOP
   731   0007A8                     
   732                           ;main.c: 143:                     LCD_Set_Cursor(1,1);
   733   0007A8  0E01               	movlw	1
   734   0007AA  6E05               	movwf	LCD_Set_Cursor@c^0,c
   735   0007AC  0E01               	movlw	1
   736   0007AE  EC54  F009         	call	_LCD_Set_Cursor
   737   0007B2                     
   738                           ;main.c: 144:                     LCD_Write_String("No ER:Deactivate");
   739   0007B2  0E1F               	movlw	low STR_3
   740   0007B4  6E07               	movwf	LCD_Write_String@str^0,c
   741   0007B6  0E06               	movlw	high STR_3
   742   0007B8  6E08               	movwf	(LCD_Write_String@str+1)^0,c
   743   0007BA  EC8D  F008         	call	_LCD_Write_String	;wreg free
   744   0007BE                     
   745                           ;main.c: 145:                     _delay((unsigned long)((3000)*(4000000/4000.0)));
   746   0007BE  0E0C               	movlw	12
   747   0007C0  6E1C               	movwf	(??_main+1)^0,c
   748   0007C2  0E6C               	movlw	108
   749   0007C4  6E1B               	movwf	??_main^0,c
   750   0007C6  0EF3               	movlw	243
   751   0007C8                     u1277:
   752   0007C8  FFFF               	dw	65535	; errata NOP
   753   0007CA  2EE8               	decfsz	wreg,f,c
   754   0007CC  D7FD               	bra	u1277
   755   0007CE  2E1B               	decfsz	??_main^0,f,c
   756   0007D0  D7FB               	bra	u1277
   757   0007D2  2E1C               	decfsz	(??_main+1)^0,f,c
   758   0007D4  D7F9               	bra	u1277
   759   0007D6                     
   760                           ;main.c: 146:                     LCD_Clear();
   761   0007D6  EC8F  F00A         	call	_LCD_Clear	;wreg free
   762   0007DA                     
   763                           ;main.c: 147:                     LCD_Write_String("Deactivated");
   764   0007DA  0E56               	movlw	low STR_4
   765   0007DC  6E07               	movwf	LCD_Write_String@str^0,c
   766   0007DE  0E06               	movlw	high STR_4
   767   0007E0  6E08               	movwf	(LCD_Write_String@str+1)^0,c
   768   0007E2  EC8D  F008         	call	_LCD_Write_String	;wreg free
   769                           
   770                           ;main.c: 148:                 }
   771   0007E6  EF41  F003         	goto	l1850
   772   0007EA                     l1902:
   773   0007EA  FFFF               	dw	65535	; assembler added errata NOP
   774   0007EC  0421               	decf	main@matchCodeResponse^0,w,c
   775   0007EE  A4D8               	btfss	status,2,c
   776   0007F0  EFFC  F003         	goto	u1011
   777   0007F4  EFFF  F003         	goto	u1010
   778   0007F8                     u1011:
   779   0007F8  FFFF               	dw	65535	; assembler added errata NOP
   780   0007FA  EF08  F004         	goto	l1906
   781   0007FE                     u1010:
   782   0007FE  FFFF               	dw	65535	; assembler added errata NOP
   783   000800                     
   784                           ;main.c: 150:                     setState(1);
   785   000800  0E00               	movlw	0
   786   000802  6E18               	movwf	(setState@targetState+1)^0,c
   787   000804  0E01               	movlw	1
   788   000806  6E17               	movwf	setState@targetState^0,c
   789   000808  EC13  F008         	call	_setState	;wreg free
   790                           
   791                           ;main.c: 151:                 }
   792   00080C  EF41  F003         	goto	l1850
   793   000810                     l1906:
   794   000810  FFFF               	dw	65535	; assembler added errata NOP
   795                           
   796                           ;main.c: 153:                     LCD_Set_Cursor(2,16);
   797   000812  0E10               	movlw	16
   798   000814  6E05               	movwf	LCD_Set_Cursor@c^0,c
   799   000816  0E02               	movlw	2
   800   000818  EC54  F009         	call	_LCD_Set_Cursor
   801                           
   802                           ;main.c: 154:                     LCD_Write_Char(" ");
   803   00081C  0E78               	movlw	STR_7& (0+255)
   804   00081E  EC08  F00A         	call	_LCD_Write_Char
   805   000822  EF41  F003         	goto	l1850
   806   000826                     l1908:
   807   000826  FFFF               	dw	65535	; assembler added errata NOP
   808                           
   809                           ;main.c: 162:                 for(int i = 0; i < 5000; i+= 50){
   810   000828  0E00               	movlw	0
   811   00082A  6E20               	movwf	(main@i_423+1)^0,c
   812   00082C  0E00               	movlw	0
   813   00082E  6E1F               	movwf	main@i_423^0,c
   814   000830                     l1914:
   815   000830  FFFF               	dw	65535	; assembler added errata NOP
   816                           
   817                           ;main.c: 163:                     if(erPolling()){
   818   000832  EC6B  F00A         	call	_erPolling	;wreg free
   819   000836  0900               	iorlw	0
   820   000838  B4D8               	btfsc	status,2,c
   821   00083A  EF21  F004         	goto	u1021
   822   00083E  EF24  F004         	goto	u1020
   823   000842                     u1021:
   824   000842  FFFF               	dw	65535	; assembler added errata NOP
   825   000844  EF27  F004         	goto	l1918
   826   000848                     u1020:
   827   000848  FFFF               	dw	65535	; assembler added errata NOP
   828   00084A  EF43  F004         	goto	l1924
   829   00084E                     l1918:
   830   00084E  FFFF               	dw	65535	; assembler added errata NOP
   831                           
   832                           ;main.c: 166:                     _delay((unsigned long)((50)*(4000000/4000.0)));
   833   000850  0E31               	movlw	49
   834   000852  6E1B               	movwf	??_main^0,c
   835   000854  0EBB               	movlw	187
   836   000856                     u1287:
   837   000856  FFFF               	dw	65535	; errata NOP
   838   000858  2EE8               	decfsz	wreg,f,c
   839   00085A  D7FD               	bra	u1287
   840   00085C  2E1B               	decfsz	??_main^0,f,c
   841   00085E  D7FB               	bra	u1287
   842   000860                     
   843                           ;main.c: 167:                 }
   844   000860  0E32               	movlw	50
   845   000862  261F               	addwf	main@i_423^0,f,c
   846   000864  0E00               	movlw	0
   847   000866  2220               	addwfc	(main@i_423+1)^0,f,c
   848   000868  BE20               	btfsc	(main@i_423+1)^0,7,c
   849   00086A  EF40  F004         	goto	u1031
   850   00086E  0E88               	movlw	136
   851   000870  5C1F               	subwf	main@i_423^0,w,c
   852   000872  0E13               	movlw	19
   853   000874  5820               	subwfb	(main@i_423+1)^0,w,c
   854   000876  A0D8               	btfss	status,0,c
   855   000878  EF40  F004         	goto	u1031
   856   00087C  EF43  F004         	goto	u1030
   857   000880                     u1031:
   858   000880  FFFF               	dw	65535	; assembler added errata NOP
   859   000882  EF18  F004         	goto	l1914
   860   000886                     u1030:
   861   000886                     l1924:
   862   000886  FFFF               	dw	65535	; assembler added errata NOP
   863                           
   864                           ;main.c: 168:                 if(erPolling()){
   865   000888  EC6B  F00A         	call	_erPolling	;wreg free
   866   00088C  0900               	iorlw	0
   867   00088E  B4D8               	btfsc	status,2,c
   868   000890  EF4C  F004         	goto	u1041
   869   000894  EF4F  F004         	goto	u1040
   870   000898                     u1041:
   871   000898  FFFF               	dw	65535	; assembler added errata NOP
   872   00089A  EF59  F004         	goto	l1928
   873   00089E                     u1040:
   874   00089E  FFFF               	dw	65535	; assembler added errata NOP
   875   0008A0                     l1926:
   876   0008A0  FFFF               	dw	65535	; assembler added errata NOP
   877                           
   878                           ;main.c: 169:                     setState(4);
   879   0008A2  0E00               	movlw	0
   880   0008A4  6E18               	movwf	(setState@targetState+1)^0,c
   881   0008A6  0E04               	movlw	4
   882   0008A8  6E17               	movwf	setState@targetState^0,c
   883   0008AA  EC13  F008         	call	_setState	;wreg free
   884                           
   885                           ;main.c: 170:                     break;
   886   0008AE  EF41  F003         	goto	l1850
   887   0008B2                     l1928:
   888   0008B2  FFFF               	dw	65535	; assembler added errata NOP
   889                           
   890                           ;main.c: 172:                 setState(2);
   891   0008B4  0E00               	movlw	0
   892   0008B6  6E18               	movwf	(setState@targetState+1)^0,c
   893   0008B8  0E02               	movlw	2
   894   0008BA  6E17               	movwf	setState@targetState^0,c
   895   0008BC  EC13  F008         	call	_setState	;wreg free
   896                           
   897                           ;main.c: 173:                 break;
   898   0008C0  EF41  F003         	goto	l1850
   899   0008C4                     l1930:
   900   0008C4  FFFF               	dw	65535	; assembler added errata NOP
   901                           
   902                           ;main.c: 181:                     for(int i = 0; i < 3000; i += 50){
   903   0008C6  0E00               	movlw	0
   904   0008C8  6E26               	movwf	(main@i_424+1)^0,c
   905   0008CA  0E00               	movlw	0
   906   0008CC  6E25               	movwf	main@i_424^0,c
   907   0008CE                     l1936:
   908   0008CE  FFFF               	dw	65535	; assembler added errata NOP
   909                           
   910                           ;main.c: 182:                         if(erPolling() || pirPolling()){
   911   0008D0  EC6B  F00A         	call	_erPolling	;wreg free
   912   0008D4  0900               	iorlw	0
   913   0008D6  A4D8               	btfss	status,2,c
   914   0008D8  EF70  F004         	goto	u1051
   915   0008DC  EF73  F004         	goto	u1050
   916   0008E0                     u1051:
   917   0008E0  FFFF               	dw	65535	; assembler added errata NOP
   918   0008E2  EFAF  F004         	goto	l1950
   919   0008E6                     u1050:
   920   0008E6  FFFF               	dw	65535	; assembler added errata NOP
   921   0008E8  EC7D  F00A         	call	_pirPolling	;wreg free
   922   0008EC  0900               	iorlw	0
   923   0008EE  B4D8               	btfsc	status,2,c
   924   0008F0  EF7C  F004         	goto	u1061
   925   0008F4  EF7F  F004         	goto	u1060
   926   0008F8                     u1061:
   927   0008F8  FFFF               	dw	65535	; assembler added errata NOP
   928   0008FA  EF82  F004         	goto	l1940
   929   0008FE                     u1060:
   930   0008FE  FFFF               	dw	65535	; assembler added errata NOP
   931   000900  EFAF  F004         	goto	l1950
   932   000904                     l1940:
   933   000904  FFFF               	dw	65535	; assembler added errata NOP
   934                           
   935                           ;main.c: 185:                         if(!sysBtnPolling()){
   936   000906  EC47  F00A         	call	_sysBtnPolling	;wreg free
   937   00090A  0900               	iorlw	0
   938   00090C  A4D8               	btfss	status,2,c
   939   00090E  EF8B  F004         	goto	u1071
   940   000912  EF8E  F004         	goto	u1070
   941   000916                     u1071:
   942   000916  FFFF               	dw	65535	; assembler added errata NOP
   943   000918  EF93  F004         	goto	l1944
   944   00091C                     u1070:
   945   00091C  FFFF               	dw	65535	; assembler added errata NOP
   946   00091E                     
   947                           ;main.c: 186:                             i = 0;
   948   00091E  0E00               	movlw	0
   949   000920  6E26               	movwf	(main@i_424+1)^0,c
   950   000922  0E00               	movlw	0
   951   000924  6E25               	movwf	main@i_424^0,c
   952   000926                     l1944:
   953   000926  FFFF               	dw	65535	; assembler added errata NOP
   954                           
   955                           ;main.c: 188:                         _delay((unsigned long)((50)*(4000000/4000.0)));
   956   000928  0E31               	movlw	49
   957   00092A  6E1B               	movwf	??_main^0,c
   958   00092C  0EBB               	movlw	187
   959   00092E                     u1297:
   960   00092E  FFFF               	dw	65535	; errata NOP
   961   000930  2EE8               	decfsz	wreg,f,c
   962   000932  D7FD               	bra	u1297
   963   000934  2E1B               	decfsz	??_main^0,f,c
   964   000936  D7FB               	bra	u1297
   965   000938                     
   966                           ;main.c: 189:                     }
   967   000938  0E32               	movlw	50
   968   00093A  2625               	addwf	main@i_424^0,f,c
   969   00093C  0E00               	movlw	0
   970   00093E  2226               	addwfc	(main@i_424+1)^0,f,c
   971   000940  BE26               	btfsc	(main@i_424+1)^0,7,c
   972   000942  EFAC  F004         	goto	u1081
   973   000946  0EB8               	movlw	184
   974   000948  5C25               	subwf	main@i_424^0,w,c
   975   00094A  0E0B               	movlw	11
   976   00094C  5826               	subwfb	(main@i_424+1)^0,w,c
   977   00094E  A0D8               	btfss	status,0,c
   978   000950  EFAC  F004         	goto	u1081
   979   000954  EFAF  F004         	goto	u1080
   980   000958                     u1081:
   981   000958  FFFF               	dw	65535	; assembler added errata NOP
   982   00095A  EF67  F004         	goto	l1936
   983   00095E                     u1080:
   984   00095E                     l1950:
   985   00095E  FFFF               	dw	65535	; assembler added errata NOP
   986                           
   987                           ;main.c: 190:                     if(erPolling()){
   988   000960  EC6B  F00A         	call	_erPolling	;wreg free
   989   000964  0900               	iorlw	0
   990   000966  B4D8               	btfsc	status,2,c
   991   000968  EFB8  F004         	goto	u1091
   992   00096C  EFBB  F004         	goto	u1090
   993   000970                     u1091:
   994   000970  FFFF               	dw	65535	; assembler added errata NOP
   995   000972  EFBE  F004         	goto	l1956
   996   000976                     u1090:
   997   000976  FFFF               	dw	65535	; assembler added errata NOP
   998   000978  EF50  F004         	goto	l1926
   999   00097C                     l1956:
  1000   00097C  FFFF               	dw	65535	; assembler added errata NOP
  1001   00097E  EC7D  F00A         	call	_pirPolling	;wreg free
  1002   000982  0900               	iorlw	0
  1003   000984  B4D8               	btfsc	status,2,c
  1004   000986  EFC7  F004         	goto	u1101
  1005   00098A  EFCA  F004         	goto	u1100
  1006   00098E                     u1101:
  1007   00098E  FFFF               	dw	65535	; assembler added errata NOP
  1008   000990  EFD3  F004         	goto	l1962
  1009   000994                     u1100:
  1010   000994  FFFF               	dw	65535	; assembler added errata NOP
  1011   000996                     
  1012                           ;main.c: 195:                         setState(3);
  1013   000996  0E00               	movlw	0
  1014   000998  6E18               	movwf	(setState@targetState+1)^0,c
  1015   00099A  0E03               	movlw	3
  1016   00099C  6E17               	movwf	setState@targetState^0,c
  1017   00099E  EC13  F008         	call	_setState	;wreg free
  1018                           
  1019                           ;main.c: 196:                         break;
  1020   0009A2  EF41  F003         	goto	l1850
  1021   0009A6                     l1962:
  1022   0009A6  FFFF               	dw	65535	; assembler added errata NOP
  1023                           
  1024                           ;main.c: 199:                         LCD_Set_Cursor(2,16);
  1025   0009A8  0E10               	movlw	16
  1026   0009AA  6E05               	movwf	LCD_Set_Cursor@c^0,c
  1027   0009AC  0E02               	movlw	2
  1028   0009AE  EC54  F009         	call	_LCD_Set_Cursor
  1029                           
  1030                           ;main.c: 200:                         LCD_Write_Char(0xFF);
  1031   0009B2  0EFF               	movlw	255
  1032   0009B4  EC08  F00A         	call	_LCD_Write_Char
  1033   0009B8                     
  1034                           ;main.c: 201:                         isSysBtnPressed = 1;
  1035   0009B8  0E01               	movlw	1
  1036   0009BA  6E2F               	movwf	main@isSysBtnPressed^0,c
  1037   0009BC                     
  1038                           ;main.c: 204:                     if(isSysBtnPressed){
  1039   0009BC  502F               	movf	main@isSysBtnPressed^0,w,c
  1040   0009BE  B4D8               	btfsc	status,2,c
  1041   0009C0  EFE4  F004         	goto	u1111
  1042   0009C4  EFE7  F004         	goto	u1110
  1043   0009C8                     u1111:
  1044   0009C8  FFFF               	dw	65535	; assembler added errata NOP
  1045   0009CA  EF41  F003         	goto	l1850
  1046   0009CE                     u1110:
  1047   0009CE  FFFF               	dw	65535	; assembler added errata NOP
  1048   0009D0                     
  1049                           ;main.c: 205:                         char matchCodeResponse = readMatchCode(activationC
      +                          ode, &isSysBtnPressedPtr);
  1050   0009D0  0E1A               	movlw	low _activationCode
  1051   0009D2  6E0D               	movwf	readMatchCode@codeToMatch^0,c
  1052   0009D4  0E06               	movlw	high _activationCode
  1053   0009D6  6E0E               	movwf	(readMatchCode@codeToMatch+1)^0,c
  1054   0009D8  0E2D               	movlw	low main@isSysBtnPressedPtr
  1055   0009DA  6E0F               	movwf	readMatchCode@isEnabled^0,c
  1056   0009DC  0E00               	movlw	high main@isSysBtnPressedPtr
  1057   0009DE  6E10               	movwf	(readMatchCode@isEnabled+1)^0,c
  1058   0009E0  EC7E  F007         	call	_readMatchCode	;wreg free
  1059   0009E4  6E22               	movwf	main@matchCodeResponse_425^0,c
  1060   0009E6                     
  1061                           ;main.c: 206:                         if(matchCodeResponse == 2){
  1062   0009E6  0E02               	movlw	2
  1063   0009E8  1822               	xorwf	main@matchCodeResponse_425^0,w,c
  1064   0009EA  A4D8               	btfss	status,2,c
  1065   0009EC  EFFA  F004         	goto	u1121
  1066   0009F0  EFFD  F004         	goto	u1120
  1067   0009F4                     u1121:
  1068   0009F4  FFFF               	dw	65535	; assembler added errata NOP
  1069   0009F6  EF00  F005         	goto	l1976
  1070   0009FA                     u1120:
  1071   0009FA  FFFF               	dw	65535	; assembler added errata NOP
  1072   0009FC  EF50  F004         	goto	l1926
  1073   000A00                     l1976:
  1074   000A00  FFFF               	dw	65535	; assembler added errata NOP
  1075   000A02  0422               	decf	main@matchCodeResponse_425^0,w,c
  1076   000A04  A4D8               	btfss	status,2,c
  1077   000A06  EF07  F005         	goto	u1131
  1078   000A0A  EF0A  F005         	goto	u1130
  1079   000A0E                     u1131:
  1080   000A0E  FFFF               	dw	65535	; assembler added errata NOP
  1081   000A10  EF14  F005         	goto	l1982
  1082   000A14                     u1130:
  1083   000A14  FFFF               	dw	65535	; assembler added errata NOP
  1084   000A16                     l1978:
  1085   000A16  FFFF               	dw	65535	; assembler added errata NOP
  1086                           
  1087                           ;main.c: 211:                             setState(0);
  1088   000A18  0E00               	movlw	0
  1089   000A1A  6E18               	movwf	(setState@targetState+1)^0,c
  1090   000A1C  0E00               	movlw	0
  1091   000A1E  6E17               	movwf	setState@targetState^0,c
  1092   000A20  EC13  F008         	call	_setState	;wreg free
  1093                           
  1094                           ;main.c: 212:                             break;
  1095   000A24  EF41  F003         	goto	l1850
  1096   000A28                     l1982:
  1097   000A28  FFFF               	dw	65535	; assembler added errata NOP
  1098                           
  1099                           ;main.c: 215:                             LCD_Set_Cursor(2,16);
  1100   000A2A  0E10               	movlw	16
  1101   000A2C  6E05               	movwf	LCD_Set_Cursor@c^0,c
  1102   000A2E  0E02               	movlw	2
  1103   000A30  EC54  F009         	call	_LCD_Set_Cursor
  1104                           
  1105                           ;main.c: 216:                             LCD_Write_Char(" ");
  1106   000A34  0E78               	movlw	STR_7& (0+255)
  1107   000A36  EC08  F00A         	call	_LCD_Write_Char
  1108   000A3A  EF41  F003         	goto	l1850
  1109   000A3E                     l1984:
  1110   000A3E  FFFF               	dw	65535	; assembler added errata NOP
  1111                           
  1112                           ;main.c: 229:                     for(int i = 0; i < 15000 ; i += 50){
  1113   000A40  0E00               	movlw	0
  1114   000A42  6E28               	movwf	(main@i_427+1)^0,c
  1115   000A44  0E00               	movlw	0
  1116   000A46  6E27               	movwf	main@i_427^0,c
  1117   000A48                     l1986:
  1118   000A48  FFFF               	dw	65535	; assembler added errata NOP
  1119   000A4A  BE28               	btfsc	(main@i_427+1)^0,7,c
  1120   000A4C  EF31  F005         	goto	u1141
  1121   000A50  0E98               	movlw	152
  1122   000A52  5C27               	subwf	main@i_427^0,w,c
  1123   000A54  0E3A               	movlw	58
  1124   000A56  5828               	subwfb	(main@i_427+1)^0,w,c
  1125   000A58  A0D8               	btfss	status,0,c
  1126   000A5A  EF31  F005         	goto	u1141
  1127   000A5E  EF34  F005         	goto	u1140
  1128   000A62                     u1141:
  1129   000A62  FFFF               	dw	65535	; assembler added errata NOP
  1130   000A64  EF37  F005         	goto	l1990
  1131   000A68                     u1140:
  1132   000A68  FFFF               	dw	65535	; assembler added errata NOP
  1133   000A6A  EF66  F005         	goto	l2004
  1134   000A6E                     l1990:
  1135   000A6E  FFFF               	dw	65535	; assembler added errata NOP
  1136                           
  1137                           ;main.c: 230:                         if(erPolling()){
  1138   000A70  EC6B  F00A         	call	_erPolling	;wreg free
  1139   000A74  0900               	iorlw	0
  1140   000A76  B4D8               	btfsc	status,2,c
  1141   000A78  EF40  F005         	goto	u1151
  1142   000A7C  EF43  F005         	goto	u1150
  1143   000A80                     u1151:
  1144   000A80  FFFF               	dw	65535	; assembler added errata NOP
  1145   000A82  EF46  F005         	goto	l1994
  1146   000A86                     u1150:
  1147   000A86  FFFF               	dw	65535	; assembler added errata NOP
  1148   000A88  EF66  F005         	goto	l2004
  1149   000A8C                     l1994:
  1150   000A8C  FFFF               	dw	65535	; assembler added errata NOP
  1151                           
  1152                           ;main.c: 233:                         if(pirPolling()){
  1153   000A8E  EC7D  F00A         	call	_pirPolling	;wreg free
  1154   000A92  0900               	iorlw	0
  1155   000A94  B4D8               	btfsc	status,2,c
  1156   000A96  EF4F  F005         	goto	u1161
  1157   000A9A  EF52  F005         	goto	u1160
  1158   000A9E                     u1161:
  1159   000A9E  FFFF               	dw	65535	; assembler added errata NOP
  1160   000AA0  EF57  F005         	goto	l1998
  1161   000AA4                     u1160:
  1162   000AA4  FFFF               	dw	65535	; assembler added errata NOP
  1163   000AA6                     
  1164                           ;main.c: 234:                             i = 0;
  1165   000AA6  0E00               	movlw	0
  1166   000AA8  6E28               	movwf	(main@i_427+1)^0,c
  1167   000AAA  0E00               	movlw	0
  1168   000AAC  6E27               	movwf	main@i_427^0,c
  1169   000AAE                     l1998:
  1170   000AAE  FFFF               	dw	65535	; assembler added errata NOP
  1171                           
  1172                           ;main.c: 236:                         _delay((unsigned long)((50)*(4000000/4000.0)));
  1173   000AB0  0E31               	movlw	49
  1174   000AB2  6E1B               	movwf	??_main^0,c
  1175   000AB4  0EBB               	movlw	187
  1176   000AB6                     u1307:
  1177   000AB6  FFFF               	dw	65535	; errata NOP
  1178   000AB8  2EE8               	decfsz	wreg,f,c
  1179   000ABA  D7FD               	bra	u1307
  1180   000ABC  2E1B               	decfsz	??_main^0,f,c
  1181   000ABE  D7FB               	bra	u1307
  1182   000AC0                     
  1183                           ;main.c: 237:                     }
  1184   000AC0  0E32               	movlw	50
  1185   000AC2  2627               	addwf	main@i_427^0,f,c
  1186   000AC4  0E00               	movlw	0
  1187   000AC6  2228               	addwfc	(main@i_427+1)^0,f,c
  1188   000AC8  EF24  F005         	goto	l1986
  1189   000ACC                     l2004:
  1190   000ACC  FFFF               	dw	65535	; assembler added errata NOP
  1191                           
  1192                           ;main.c: 238:                     if(erPolling()){
  1193   000ACE  EC6B  F00A         	call	_erPolling	;wreg free
  1194   000AD2  0900               	iorlw	0
  1195   000AD4  B4D8               	btfsc	status,2,c
  1196   000AD6  EF6F  F005         	goto	u1171
  1197   000ADA  EF72  F005         	goto	u1170
  1198   000ADE                     u1171:
  1199   000ADE  FFFF               	dw	65535	; assembler added errata NOP
  1200   000AE0  EF59  F004         	goto	l1928
  1201   000AE4                     u1170:
  1202   000AE4  FFFF               	dw	65535	; assembler added errata NOP
  1203   000AE6  EF50  F004         	goto	l1926
  1204   000AEA                     l2010:
  1205   000AEA  FFFF               	dw	65535	; assembler added errata NOP
  1206                           
  1207                           ;main.c: 253:                     for(int i = 0; i < 8000; i += 50){
  1208   000AEC  0E00               	movlw	0
  1209   000AEE  6E2A               	movwf	(main@i_428+1)^0,c
  1210   000AF0  0E00               	movlw	0
  1211   000AF2  6E29               	movwf	main@i_428^0,c
  1212   000AF4                     l2012:
  1213   000AF4  FFFF               	dw	65535	; assembler added errata NOP
  1214   000AF6  BE2A               	btfsc	(main@i_428+1)^0,7,c
  1215   000AF8  EF87  F005         	goto	u1181
  1216   000AFC  0E40               	movlw	64
  1217   000AFE  5C29               	subwf	main@i_428^0,w,c
  1218   000B00  0E1F               	movlw	31
  1219   000B02  582A               	subwfb	(main@i_428+1)^0,w,c
  1220   000B04  A0D8               	btfss	status,0,c
  1221   000B06  EF87  F005         	goto	u1181
  1222   000B0A  EF8A  F005         	goto	u1180
  1223   000B0E                     u1181:
  1224   000B0E  FFFF               	dw	65535	; assembler added errata NOP
  1225   000B10  EF8D  F005         	goto	l2016
  1226   000B14                     u1180:
  1227   000B14  FFFF               	dw	65535	; assembler added errata NOP
  1228   000B16  EFAD  F005         	goto	l2026
  1229   000B1A                     l2016:
  1230   000B1A  FFFF               	dw	65535	; assembler added errata NOP
  1231                           
  1232                           ;main.c: 254:                         if(!rstBtnPolling()){
  1233   000B1C  EC59  F00A         	call	_rstBtnPolling	;wreg free
  1234   000B20  0900               	iorlw	0
  1235   000B22  A4D8               	btfss	status,2,c
  1236   000B24  EF96  F005         	goto	u1191
  1237   000B28  EF99  F005         	goto	u1190
  1238   000B2C                     u1191:
  1239   000B2C  FFFF               	dw	65535	; assembler added errata NOP
  1240   000B2E  EF9E  F005         	goto	l2020
  1241   000B32                     u1190:
  1242   000B32  FFFF               	dw	65535	; assembler added errata NOP
  1243   000B34                     
  1244                           ;main.c: 255:                             i = 0;
  1245   000B34  0E00               	movlw	0
  1246   000B36  6E2A               	movwf	(main@i_428+1)^0,c
  1247   000B38  0E00               	movlw	0
  1248   000B3A  6E29               	movwf	main@i_428^0,c
  1249   000B3C                     l2020:
  1250   000B3C  FFFF               	dw	65535	; assembler added errata NOP
  1251                           
  1252                           ;main.c: 257:                         _delay((unsigned long)((50)*(4000000/4000.0)));
  1253   000B3E  0E31               	movlw	49
  1254   000B40  6E1B               	movwf	??_main^0,c
  1255   000B42  0EBB               	movlw	187
  1256   000B44                     u1317:
  1257   000B44  FFFF               	dw	65535	; errata NOP
  1258   000B46  2EE8               	decfsz	wreg,f,c
  1259   000B48  D7FD               	bra	u1317
  1260   000B4A  2E1B               	decfsz	??_main^0,f,c
  1261   000B4C  D7FB               	bra	u1317
  1262   000B4E                     
  1263                           ;main.c: 258:                     }
  1264   000B4E  0E32               	movlw	50
  1265   000B50  2629               	addwf	main@i_428^0,f,c
  1266   000B52  0E00               	movlw	0
  1267   000B54  222A               	addwfc	(main@i_428+1)^0,f,c
  1268   000B56  EF7A  F005         	goto	l2012
  1269   000B5A                     l2026:
  1270   000B5A  FFFF               	dw	65535	; assembler added errata NOP
  1271                           
  1272                           ;main.c: 259:                     LCD_Set_Cursor(2,16);
  1273   000B5C  0E10               	movlw	16
  1274   000B5E  6E05               	movwf	LCD_Set_Cursor@c^0,c
  1275   000B60  0E02               	movlw	2
  1276   000B62  EC54  F009         	call	_LCD_Set_Cursor
  1277                           
  1278                           ;main.c: 260:                     LCD_Write_Char(0xFF);
  1279   000B66  0EFF               	movlw	255
  1280   000B68  EC08  F00A         	call	_LCD_Write_Char
  1281   000B6C                     
  1282                           ;main.c: 261:                     Bool isRstBtnPressed = 1;
  1283   000B6C  0E01               	movlw	1
  1284   000B6E  6E1D               	movwf	main@isRstBtnPressed^0,c
  1285   000B70                     
  1286                           ;main.c: 262:                     Bool* isRstBtnPressedPtr = &isRstBtnPressed;
  1287   000B70  0E1D               	movlw	low main@isRstBtnPressed
  1288   000B72  6E2B               	movwf	main@isRstBtnPressedPtr^0,c
  1289   000B74  0E00               	movlw	high main@isRstBtnPressed
  1290   000B76  6E2C               	movwf	(main@isRstBtnPressedPtr+1)^0,c
  1291   000B78                     
  1292                           ;main.c: 263:                     char matchCodeResponse = readMatchCode(&resetCode, &is
      +                          RstBtnPressedPtr);
  1293   000B78  0E15               	movlw	low _resetCode
  1294   000B7A  6E0D               	movwf	readMatchCode@codeToMatch^0,c
  1295   000B7C  0E06               	movlw	high _resetCode
  1296   000B7E  6E0E               	movwf	(readMatchCode@codeToMatch+1)^0,c
  1297   000B80  0E2B               	movlw	low main@isRstBtnPressedPtr
  1298   000B82  6E0F               	movwf	readMatchCode@isEnabled^0,c
  1299   000B84  0E00               	movlw	high main@isRstBtnPressedPtr
  1300   000B86  6E10               	movwf	(readMatchCode@isEnabled+1)^0,c
  1301   000B88  EC7E  F007         	call	_readMatchCode	;wreg free
  1302   000B8C  6E1E               	movwf	main@matchCodeResponse_431^0,c
  1303   000B8E                     
  1304                           ;main.c: 264:                     if(matchCodeResponse == 1){
  1305   000B8E  041E               	decf	main@matchCodeResponse_431^0,w,c
  1306   000B90  A4D8               	btfss	status,2,c
  1307   000B92  EFCD  F005         	goto	u1201
  1308   000B96  EFD0  F005         	goto	u1200
  1309   000B9A                     u1201:
  1310   000B9A  FFFF               	dw	65535	; assembler added errata NOP
  1311   000B9C  EFDB  F005         	goto	l2042
  1312   000BA0                     u1200:
  1313   000BA0  FFFF               	dw	65535	; assembler added errata NOP
  1314   000BA2                     
  1315                           ;main.c: 265:                         preciseTimer = 0;
  1316   000BA2  0E00               	movlw	0
  1317   000BA4  6E30               	movwf	_preciseTimer^0,c
  1318   000BA6  0E00               	movlw	0
  1319   000BA8  6E31               	movwf	(_preciseTimer+1)^0,c
  1320   000BAA  0E00               	movlw	0
  1321   000BAC  6E32               	movwf	(_preciseTimer+2)^0,c
  1322   000BAE  0E00               	movlw	0
  1323   000BB0  6E33               	movwf	(_preciseTimer+3)^0,c
  1324   000BB2  EF0B  F005         	goto	l1978
  1325   000BB6                     l2042:
  1326   000BB6  FFFF               	dw	65535	; assembler added errata NOP
  1327                           
  1328                           ;main.c: 270:                             LCD_Set_Cursor(2,16);
  1329   000BB8  0E10               	movlw	16
  1330   000BBA  6E05               	movwf	LCD_Set_Cursor@c^0,c
  1331   000BBC  0E02               	movlw	2
  1332   000BBE  EC54  F009         	call	_LCD_Set_Cursor
  1333                           
  1334                           ;main.c: 271:                             LCD_Write_Char(" ");
  1335   000BC2  0E78               	movlw	STR_7& (0+255)
  1336   000BC4  EC08  F00A         	call	_LCD_Write_Char
  1337   000BC8  EF75  F005         	goto	l2010
  1338   000BCC                     l2048:
  1339   000BCC  FFFF               	dw	65535	; assembler added errata NOP
  1340   000BCE  5034               	movf	_currentState^0,w,c
  1341   000BD0  6E1B               	movwf	??_main^0,c
  1342   000BD2  6A1C               	clrf	(??_main+1)^0,c
  1343                           
  1344                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1345                           ; Switch size 1, requested type "simple"
  1346                           ; Number of cases is 1, Range of values is 0 to 0
  1347                           ; switch strategies available:
  1348                           ; Name         Instructions Cycles
  1349                           ; simple_byte            4     3 (average)
  1350                           ;	Chosen strategy is simple_byte
  1351   000BD4  501C               	movf	(??_main+1)^0,w,c
  1352   000BD6  0A00               	xorlw	0	; case 0
  1353   000BD8  B4D8               	btfsc	status,2,c
  1354   000BDA  EFF1  F005         	goto	l2082
  1355   000BDE  EF0B  F005         	goto	l1978
  1356   000BE2                     l2082:
  1357   000BE2  FFFF               	dw	65535	; assembler added errata NOP
  1358                           
  1359                           ; Switch size 1, requested type "simple"
  1360                           ; Number of cases is 5, Range of values is 0 to 4
  1361                           ; switch strategies available:
  1362                           ; Name         Instructions Cycles
  1363                           ; simple_byte           16     9 (average)
  1364                           ;	Chosen strategy is simple_byte
  1365   000BE4  501B               	movf	??_main^0,w,c
  1366   000BE6  0A00               	xorlw	0	; case 0
  1367   000BE8  B4D8               	btfsc	status,2,c
  1368   000BEA  EFB3  F003         	goto	l1886
  1369   000BEE  0A01               	xorlw	1	; case 1
  1370   000BF0  B4D8               	btfsc	status,2,c
  1371   000BF2  EF13  F004         	goto	l1908
  1372   000BF6  0A03               	xorlw	3	; case 2
  1373   000BF8  B4D8               	btfsc	status,2,c
  1374   000BFA  EF62  F004         	goto	l1930
  1375   000BFE  0A01               	xorlw	1	; case 3
  1376   000C00  B4D8               	btfsc	status,2,c
  1377   000C02  EF1F  F005         	goto	l1984
  1378   000C06  0A07               	xorlw	7	; case 4
  1379   000C08  B4D8               	btfsc	status,2,c
  1380   000C0A  EF75  F005         	goto	l2010
  1381   000C0E  EF0B  F005         	goto	l1978
  1382   000C12  EF64  F000         	goto	start
  1383   000C16                     __end_of_main:
  1384                           	callstack 0
  1385                           
  1386 ;; *************** function _sysBtnPolling *****************
  1387 ;; Defined at:
  1388 ;;		line 454 in file "main.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;		None
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;		None
  1393 ;; Return value:  Size  Location     Type
  1394 ;;                  1    wreg      _Bool 
  1395 ;; Registers used:
  1396 ;;		wreg
  1397 ;; Tracked objects:
  1398 ;;		On entry : 0/0
  1399 ;;		On exit  : 0/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1402 ;;      Params:         0       0       0       0       0       0       0
  1403 ;;      Locals:         0       0       0       0       0       0       0
  1404 ;;      Temps:          0       0       0       0       0       0       0
  1405 ;;      Totals:         0       0       0       0       0       0       0
  1406 ;;Total ram usage:        0 bytes
  1407 ;; Hardware stack levels used: 1
  1408 ;; Hardware stack levels required when called: 2
  1409 ;; This function calls:
  1410 ;;		Nothing
  1411 ;; This function is called by:
  1412 ;;		_main
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           	psect	text1
  1417   00148E                     __ptext1:
  1418                           	callstack 0
  1419   00148E                     _sysBtnPolling:
  1420                           	callstack 0
  1421   00148E  FFFF               	dw	65535	; assembler added errata NOP
  1422   001490                     
  1423                           ;main.c: 455:     if(PORTCbits.RC2){
  1424   001490  A482               	btfss	130,2,c	;volatile
  1425   001492  EF4D  F00A         	goto	u301
  1426   001496  EF50  F00A         	goto	u300
  1427   00149A                     u301:
  1428   00149A  FFFF               	dw	65535	; assembler added errata NOP
  1429   00149C  EF54  F00A         	goto	l1316
  1430   0014A0                     u300:
  1431   0014A0  FFFF               	dw	65535	; assembler added errata NOP
  1432   0014A2                     
  1433                           ;main.c: 456:         return 1;
  1434   0014A2  0E01               	movlw	1
  1435   0014A4  EF56  F00A         	goto	l318
  1436   0014A8                     l1316:
  1437   0014A8  FFFF               	dw	65535	; assembler added errata NOP
  1438                           
  1439                           ;main.c: 458:     return 0;
  1440   0014AA  0E00               	movlw	0
  1441   0014AC                     l318:
  1442   0014AC  FFFF               	dw	65535	; assembler added errata NOP
  1443   0014AE  0012               	return		;funcret
  1444   0014B0  FFFF               	dw	65535	; errata NOP
  1445   0014B2                     __end_of_sysBtnPolling:
  1446                           	callstack 0
  1447                           
  1448 ;; *************** function _rstBtnPolling *****************
  1449 ;; Defined at:
  1450 ;;		line 461 in file "main.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;		None
  1453 ;; Auto vars:     Size  Location     Type
  1454 ;;		None
  1455 ;; Return value:  Size  Location     Type
  1456 ;;                  1    wreg      _Bool 
  1457 ;; Registers used:
  1458 ;;		wreg
  1459 ;; Tracked objects:
  1460 ;;		On entry : 0/0
  1461 ;;		On exit  : 0/0
  1462 ;;		Unchanged: 0/0
  1463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1464 ;;      Params:         0       0       0       0       0       0       0
  1465 ;;      Locals:         0       0       0       0       0       0       0
  1466 ;;      Temps:          0       0       0       0       0       0       0
  1467 ;;      Totals:         0       0       0       0       0       0       0
  1468 ;;Total ram usage:        0 bytes
  1469 ;; Hardware stack levels used: 1
  1470 ;; Hardware stack levels required when called: 2
  1471 ;; This function calls:
  1472 ;;		Nothing
  1473 ;; This function is called by:
  1474 ;;		_main
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           
  1478                           	psect	text2
  1479   0014B2                     __ptext2:
  1480                           	callstack 0
  1481   0014B2                     _rstBtnPolling:
  1482                           	callstack 0
  1483   0014B2  FFFF               	dw	65535	; assembler added errata NOP
  1484   0014B4                     
  1485                           ;main.c: 462:     if(PORTCbits.RC3){
  1486   0014B4  A682               	btfss	130,3,c	;volatile
  1487   0014B6  EF5F  F00A         	goto	u381
  1488   0014BA  EF62  F00A         	goto	u380
  1489   0014BE                     u381:
  1490   0014BE  FFFF               	dw	65535	; assembler added errata NOP
  1491   0014C0  EF66  F00A         	goto	l1378
  1492   0014C4                     u380:
  1493   0014C4  FFFF               	dw	65535	; assembler added errata NOP
  1494   0014C6                     
  1495                           ;main.c: 463:         return 1;
  1496   0014C6  0E01               	movlw	1
  1497   0014C8  EF68  F00A         	goto	l322
  1498   0014CC                     l1378:
  1499   0014CC  FFFF               	dw	65535	; assembler added errata NOP
  1500                           
  1501                           ;main.c: 465:     return 0;
  1502   0014CE  0E00               	movlw	0
  1503   0014D0                     l322:
  1504   0014D0  FFFF               	dw	65535	; assembler added errata NOP
  1505   0014D2  0012               	return		;funcret
  1506   0014D4  FFFF               	dw	65535	; errata NOP
  1507   0014D6                     __end_of_rstBtnPolling:
  1508                           	callstack 0
  1509                           
  1510 ;; *************** function _readMatchCode *****************
  1511 ;; Defined at:
  1512 ;;		line 390 in file "main.c"
  1513 ;; Parameters:    Size  Location     Type
  1514 ;;  codeToMatch     2   12[COMRAM] PTR unsigned char 
  1515 ;;		 -> resetCode(5), activationCode(5), 
  1516 ;;  isEnabled       2   14[COMRAM] PTR PTR _Bool 
  1517 ;;		 -> main@isRstBtnPressedPtr(2), main@isSysBtnPressedPtr(2), 
  1518 ;; Auto vars:     Size  Location     Type
  1519 ;;  pressedKey      1   20[COMRAM] unsigned char 
  1520 ;;  codePosition    2   18[COMRAM] int 
  1521 ;; Return value:  Size  Location     Type
  1522 ;;                  1    wreg      unsigned char 
  1523 ;; Registers used:
  1524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1525 ;; Tracked objects:
  1526 ;;		On entry : 0/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1530 ;;      Params:         4       0       0       0       0       0       0
  1531 ;;      Locals:         3       0       0       0       0       0       0
  1532 ;;      Temps:          2       0       0       0       0       0       0
  1533 ;;      Totals:         9       0       0       0       0       0       0
  1534 ;;Total ram usage:        9 bytes
  1535 ;; Hardware stack levels used: 1
  1536 ;; Hardware stack levels required when called: 3
  1537 ;; This function calls:
  1538 ;;		_erPolling
  1539 ;;		_keypadPolling
  1540 ;; This function is called by:
  1541 ;;		_main
  1542 ;; This function uses a non-reentrant model
  1543 ;;
  1544                           
  1545                           	psect	text3
  1546   000EFC                     __ptext3:
  1547                           	callstack 0
  1548   000EFC                     _readMatchCode:
  1549                           	callstack 0
  1550   000EFC  FFFF               	dw	65535	; assembler added errata NOP
  1551   000EFE                     
  1552                           ;main.c: 391:     int codePosition = 0;
  1553   000EFE  0E00               	movlw	0
  1554   000F00  6E14               	movwf	(readMatchCode@codePosition+1)^0,c
  1555   000F02  0E00               	movlw	0
  1556   000F04  6E13               	movwf	readMatchCode@codePosition^0,c
  1557                           
  1558                           ;main.c: 392:     while(*isEnabled){
  1559   000F06  EFFF  F007         	goto	l1828
  1560   000F0A                     l1794:
  1561   000F0A  FFFF               	dw	65535	; assembler added errata NOP
  1562                           
  1563                           ;main.c: 393:         char pressedKey = keypadPolling();
  1564   000F0C  ECC7  F006         	call	_keypadPolling	;wreg free
  1565   000F10  6E15               	movwf	readMatchCode@pressedKey^0,c
  1566   000F12                     
  1567                           ;main.c: 394:         if(erPolling()){
  1568   000F12  EC6B  F00A         	call	_erPolling	;wreg free
  1569   000F16  0900               	iorlw	0
  1570   000F18  B4D8               	btfsc	status,2,c
  1571   000F1A  EF91  F007         	goto	u861
  1572   000F1E  EF94  F007         	goto	u860
  1573   000F22                     u861:
  1574   000F22  FFFF               	dw	65535	; assembler added errata NOP
  1575   000F24  EFA0  F007         	goto	l1804
  1576   000F28                     u860:
  1577   000F28  FFFF               	dw	65535	; assembler added errata NOP
  1578   000F2A                     
  1579                           ;main.c: 395:             *isEnabled = 0;
  1580   000F2A  C00F  FFD9         	movff	readMatchCode@isEnabled,fsr2l
  1581   000F2E  C010  FFDA         	movff	readMatchCode@isEnabled+1,fsr2h
  1582   000F32  0E00               	movlw	0
  1583   000F34  6EDE               	movwf	postinc2,c
  1584   000F36  0E00               	movlw	0
  1585   000F38  6EDD               	movwf	postdec2,c
  1586   000F3A                     
  1587                           ;main.c: 396:             return 2;
  1588   000F3A  0E02               	movlw	2
  1589   000F3C  EF10  F008         	goto	l285
  1590   000F40                     l1804:
  1591   000F40  FFFF               	dw	65535	; assembler added errata NOP
  1592                           
  1593                           ;main.c: 399:         if(pressedKey == codeToMatch[codePosition]){
  1594   000F42  5013               	movf	readMatchCode@codePosition^0,w,c
  1595   000F44  240D               	addwf	readMatchCode@codeToMatch^0,w,c
  1596   000F46  6E11               	movwf	??_readMatchCode^0,c
  1597   000F48  5014               	movf	(readMatchCode@codePosition+1)^0,w,c
  1598   000F4A  200E               	addwfc	(readMatchCode@codeToMatch+1)^0,w,c
  1599   000F4C  6E12               	movwf	(??_readMatchCode+1)^0,c
  1600   000F4E  C011  FFF6         	movff	??_readMatchCode,tblptrl
  1601   000F52  C012  FFF7         	movff	??_readMatchCode+1,tblptrh
  1602   000F56                     	if	0	;tblptru may be non-zero
  1603   000F56                     	endif
  1604   000F56                     	if	0	;tblptru may be non-zero
  1605   000F56                     	endif
  1606   000F56  0008               	tblrd		*
  1607   000F58  FFFF               	dw	65535	; errata NOP
  1608   000F5A  50F5               	movf	tablat,w,c
  1609   000F5C  1815               	xorwf	readMatchCode@pressedKey^0,w,c
  1610   000F5E  A4D8               	btfss	status,2,c
  1611   000F60  EFB4  F007         	goto	u871
  1612   000F64  EFB7  F007         	goto	u870
  1613   000F68                     u871:
  1614   000F68  FFFF               	dw	65535	; assembler added errata NOP
  1615   000F6A  EFD1  F007         	goto	l1816
  1616   000F6E                     u870:
  1617   000F6E  FFFF               	dw	65535	; assembler added errata NOP
  1618   000F70                     
  1619                           ;main.c: 400:             codePosition++;
  1620   000F70  4A13               	infsnz	readMatchCode@codePosition^0,f,c
  1621   000F72  2A14               	incf	(readMatchCode@codePosition+1)^0,f,c
  1622   000F74                     
  1623                           ;main.c: 401:             if(codePosition == sizeof(activationCode)){
  1624   000F74  0E05               	movlw	5
  1625   000F76  1813               	xorwf	readMatchCode@codePosition^0,w,c
  1626   000F78  1014               	iorwf	(readMatchCode@codePosition+1)^0,w,c
  1627   000F7A  A4D8               	btfss	status,2,c
  1628   000F7C  EFC2  F007         	goto	u881
  1629   000F80  EFC5  F007         	goto	u880
  1630   000F84                     u881:
  1631   000F84  FFFF               	dw	65535	; assembler added errata NOP
  1632   000F86  EFF6  F007         	goto	l1826
  1633   000F8A                     u880:
  1634   000F8A  FFFF               	dw	65535	; assembler added errata NOP
  1635   000F8C                     
  1636                           ;main.c: 402:                 *isEnabled = 0;
  1637   000F8C  C00F  FFD9         	movff	readMatchCode@isEnabled,fsr2l
  1638   000F90  C010  FFDA         	movff	readMatchCode@isEnabled+1,fsr2h
  1639   000F94  0E00               	movlw	0
  1640   000F96  6EDE               	movwf	postinc2,c
  1641   000F98  0E00               	movlw	0
  1642   000F9A  6EDD               	movwf	postdec2,c
  1643   000F9C                     
  1644                           ;main.c: 403:                 return 1;
  1645   000F9C  0E01               	movlw	1
  1646   000F9E  EF10  F008         	goto	l285
  1647   000FA2                     l1816:
  1648   000FA2  FFFF               	dw	65535	; assembler added errata NOP
  1649   000FA4  0E63               	movlw	99
  1650   000FA6  1815               	xorwf	readMatchCode@pressedKey^0,w,c
  1651   000FA8  A4D8               	btfss	status,2,c
  1652   000FAA  EFD9  F007         	goto	u891
  1653   000FAE  EFDC  F007         	goto	u890
  1654   000FB2                     u891:
  1655   000FB2  FFFF               	dw	65535	; assembler added errata NOP
  1656   000FB4  EFDF  F007         	goto	l1820
  1657   000FB8                     u890:
  1658   000FB8  FFFF               	dw	65535	; assembler added errata NOP
  1659   000FBA  EFF6  F007         	goto	l1826
  1660   000FBE                     l1820:
  1661   000FBE  FFFF               	dw	65535	; assembler added errata NOP
  1662   000FC0  0E62               	movlw	98
  1663   000FC2  1815               	xorwf	readMatchCode@pressedKey^0,w,c
  1664   000FC4  A4D8               	btfss	status,2,c
  1665   000FC6  EFE7  F007         	goto	u901
  1666   000FCA  EFEA  F007         	goto	u900
  1667   000FCE                     u901:
  1668   000FCE  FFFF               	dw	65535	; assembler added errata NOP
  1669   000FD0  EFED  F007         	goto	l1824
  1670   000FD4                     u900:
  1671   000FD4  FFFF               	dw	65535	; assembler added errata NOP
  1672   000FD6  EFF6  F007         	goto	l1826
  1673   000FDA                     l1824:
  1674   000FDA  FFFF               	dw	65535	; assembler added errata NOP
  1675                           
  1676                           ;main.c: 409:             *isEnabled = 0;
  1677   000FDC  C00F  FFD9         	movff	readMatchCode@isEnabled,fsr2l
  1678   000FE0  C010  FFDA         	movff	readMatchCode@isEnabled+1,fsr2h
  1679   000FE4  0E00               	movlw	0
  1680   000FE6  6EDE               	movwf	postinc2,c
  1681   000FE8  0E00               	movlw	0
  1682   000FEA  6EDD               	movwf	postdec2,c
  1683   000FEC                     l1826:
  1684   000FEC  FFFF               	dw	65535	; assembler added errata NOP
  1685                           
  1686                           ;main.c: 411:         _delay((unsigned long)((50)*(4000000/4000.0)));
  1687   000FEE  0E31               	movlw	49
  1688   000FF0  6E11               	movwf	??_readMatchCode^0,c
  1689   000FF2  0EBB               	movlw	187
  1690   000FF4                     u1327:
  1691   000FF4  FFFF               	dw	65535	; errata NOP
  1692   000FF6  2EE8               	decfsz	wreg,f,c
  1693   000FF8  D7FD               	bra	u1327
  1694   000FFA  2E11               	decfsz	??_readMatchCode^0,f,c
  1695   000FFC  D7FB               	bra	u1327
  1696   000FFE                     l1828:
  1697   000FFE  FFFF               	dw	65535	; assembler added errata NOP
  1698                           
  1699                           ;main.c: 392:     while(*isEnabled){
  1700   001000  C00F  FFD9         	movff	readMatchCode@isEnabled,fsr2l
  1701   001004  C010  FFDA         	movff	readMatchCode@isEnabled+1,fsr2h
  1702   001008  50DE               	movf	postinc2,w,c
  1703   00100A  10DE               	iorwf	postinc2,w,c
  1704   00100C  A4D8               	btfss	status,2,c
  1705   00100E  EF0B  F008         	goto	u911
  1706   001012  EF0E  F008         	goto	u910
  1707   001016                     u911:
  1708   001016  FFFF               	dw	65535	; assembler added errata NOP
  1709   001018  EF85  F007         	goto	l1794
  1710   00101C                     u910:
  1711   00101C  FFFF               	dw	65535	; assembler added errata NOP
  1712   00101E                     
  1713                           ;main.c: 413:     return 0;
  1714   00101E  0E00               	movlw	0
  1715   001020                     l285:
  1716   001020  FFFF               	dw	65535	; assembler added errata NOP
  1717   001022  0012               	return		;funcret
  1718   001024  FFFF               	dw	65535	; errata NOP
  1719   001026                     __end_of_readMatchCode:
  1720                           	callstack 0
  1721                           
  1722 ;; *************** function _keypadPolling *****************
  1723 ;; Defined at:
  1724 ;;		line 416 in file "main.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;		None
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;  j               2   10[COMRAM] int 
  1729 ;;  i               2    8[COMRAM] int 
  1730 ;;  pressedKey      1    7[COMRAM] unsigned char 
  1731 ;;  keyDetected     1    6[COMRAM] _Bool 
  1732 ;; Return value:  Size  Location     Type
  1733 ;;                  1    wreg      unsigned char 
  1734 ;; Registers used:
  1735 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1741 ;;      Params:         0       0       0       0       0       0       0
  1742 ;;      Locals:         6       0       0       0       0       0       0
  1743 ;;      Temps:          4       0       0       0       0       0       0
  1744 ;;      Totals:        10       0       0       0       0       0       0
  1745 ;;Total ram usage:       10 bytes
  1746 ;; Hardware stack levels used: 1
  1747 ;; Hardware stack levels required when called: 2
  1748 ;; This function calls:
  1749 ;;		Nothing
  1750 ;; This function is called by:
  1751 ;;		_readMatchCode
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755                           	psect	text4
  1756   000D8E                     __ptext4:
  1757                           	callstack 0
  1758   000D8E                     _keypadPolling:
  1759                           	callstack 0
  1760   000D8E  FFFF               	dw	65535	; assembler added errata NOP
  1761   000D90                     
  1762                           ;main.c: 417:     Bool keyDetected = 0;
  1763   000D90  0E00               	movlw	0
  1764   000D92  6E07               	movwf	keypadPolling@keyDetected^0,c
  1765                           
  1766                           ;main.c: 418:     unsigned char pressedKey = 99;
  1767   000D94  0E63               	movlw	99
  1768   000D96  6E08               	movwf	keypadPolling@pressedKey^0,c
  1769                           
  1770                           ;main.c: 419:     for(int i = 0; i < 4; i++){
  1771   000D98  0E00               	movlw	0
  1772   000D9A  6E0A               	movwf	(keypadPolling@i+1)^0,c
  1773   000D9C  0E00               	movlw	0
  1774   000D9E  6E09               	movwf	keypadPolling@i^0,c
  1775   000DA0                     l1256:
  1776   000DA0  FFFF               	dw	65535	; assembler added errata NOP
  1777   000DA2  BE0A               	btfsc	(keypadPolling@i+1)^0,7,c
  1778   000DA4  EFDD  F006         	goto	u231
  1779   000DA8  500A               	movf	(keypadPolling@i+1)^0,w,c
  1780   000DAA  E10A               	bnz	u230
  1781   000DAC  0E04               	movlw	4
  1782   000DAE  5C09               	subwf	keypadPolling@i^0,w,c
  1783   000DB0  A0D8               	btfss	status,0,c
  1784   000DB2  EFDD  F006         	goto	u231
  1785   000DB6  EFE0  F006         	goto	u230
  1786   000DBA                     u231:
  1787   000DBA  FFFF               	dw	65535	; assembler added errata NOP
  1788   000DBC  EFE3  F006         	goto	l1260
  1789   000DC0                     u230:
  1790   000DC0  FFFF               	dw	65535	; assembler added errata NOP
  1791   000DC2  EF5F  F007         	goto	l1288
  1792   000DC6                     l1260:
  1793   000DC6  FFFF               	dw	65535	; assembler added errata NOP
  1794                           
  1795                           ;main.c: 420:         PORTB = (0x08 >> i);
  1796   000DC8  C009  F003         	movff	keypadPolling@i,??_keypadPolling
  1797   000DCC  0E08               	movlw	8
  1798   000DCE  6E04               	movwf	(??_keypadPolling+1)^0,c
  1799   000DD0  0E00               	movlw	0
  1800   000DD2  6E05               	movwf	(??_keypadPolling+2)^0,c
  1801   000DD4  2A03               	incf	??_keypadPolling^0,f,c
  1802   000DD6  EFF1  F006         	goto	u244
  1803   000DDA                     u245:
  1804   000DDA  FFFF               	dw	65535	; assembler added errata NOP
  1805   000DDC  3405               	rlcf	(??_keypadPolling+2)^0,w,c
  1806   000DDE  3205               	rrcf	(??_keypadPolling+2)^0,f,c
  1807   000DE0  3204               	rrcf	(??_keypadPolling+1)^0,f,c
  1808   000DE2                     u244:
  1809   000DE2  FFFF               	dw	65535	; assembler added errata NOP
  1810   000DE4  2E03               	decfsz	??_keypadPolling^0,f,c
  1811   000DE6  EFED  F006         	goto	u245
  1812   000DEA  5004               	movf	(??_keypadPolling+1)^0,w,c
  1813   000DEC  6E81               	movwf	129,c	;volatile
  1814   000DEE                     
  1815                           ;main.c: 421:         for(int j = 0; j < 4; j++){
  1816   000DEE  0E00               	movlw	0
  1817   000DF0  6E0C               	movwf	(keypadPolling@j+1)^0,c
  1818   000DF2  0E00               	movlw	0
  1819   000DF4  6E0B               	movwf	keypadPolling@j^0,c
  1820   000DF6                     l1268:
  1821   000DF6  FFFF               	dw	65535	; assembler added errata NOP
  1822                           
  1823                           ;main.c: 422:             if(PORTB & 0x10 << j){
  1824   000DF8  C00B  F003         	movff	keypadPolling@j,??_keypadPolling
  1825   000DFC  0E10               	movlw	16
  1826   000DFE  6E04               	movwf	(??_keypadPolling+1)^0,c
  1827   000E00  2A03               	incf	??_keypadPolling^0,f,c
  1828   000E02  EF06  F007         	goto	u254
  1829   000E06                     u255:
  1830   000E06  FFFF               	dw	65535	; assembler added errata NOP
  1831   000E08  90D8               	bcf	status,0,c
  1832   000E0A  3604               	rlcf	(??_keypadPolling+1)^0,f,c
  1833   000E0C                     u254:
  1834   000E0C  FFFF               	dw	65535	; assembler added errata NOP
  1835   000E0E  2E03               	decfsz	??_keypadPolling^0,f,c
  1836   000E10  EF03  F007         	goto	u255
  1837   000E14  5004               	movf	(??_keypadPolling+1)^0,w,c
  1838   000E16  1481               	andwf	129,w,c	;volatile
  1839   000E18  0900               	iorlw	0
  1840   000E1A  B4D8               	btfsc	status,2,c
  1841   000E1C  EF12  F007         	goto	u261
  1842   000E20  EF15  F007         	goto	u260
  1843   000E24                     u261:
  1844   000E24  FFFF               	dw	65535	; assembler added errata NOP
  1845   000E26  EF48  F007         	goto	l1280
  1846   000E2A                     u260:
  1847   000E2A  FFFF               	dw	65535	; assembler added errata NOP
  1848   000E2C                     
  1849                           ;main.c: 423:                 if(!keyDetected){
  1850   000E2C  5007               	movf	keypadPolling@keyDetected^0,w,c
  1851   000E2E  A4D8               	btfss	status,2,c
  1852   000E30  EF1C  F007         	goto	u271
  1853   000E34  EF1F  F007         	goto	u270
  1854   000E38                     u271:
  1855   000E38  FFFF               	dw	65535	; assembler added errata NOP
  1856   000E3A  EF44  F007         	goto	l1276
  1857   000E3E                     u270:
  1858   000E3E  FFFF               	dw	65535	; assembler added errata NOP
  1859   000E40                     
  1860                           ;main.c: 424:                     pressedKey = keypad[i][3-j];
  1861   000E40  C009  F003         	movff	keypadPolling@i,??_keypadPolling
  1862   000E44  C00A  F004         	movff	keypadPolling@i+1,??_keypadPolling+1
  1863   000E48  90D8               	bcf	status,0,c
  1864   000E4A  3603               	rlcf	??_keypadPolling^0,f,c
  1865   000E4C  3604               	rlcf	(??_keypadPolling+1)^0,f,c
  1866   000E4E  90D8               	bcf	status,0,c
  1867   000E50  3603               	rlcf	??_keypadPolling^0,f,c
  1868   000E52  3604               	rlcf	(??_keypadPolling+1)^0,f,c
  1869   000E54  0E01               	movlw	low _keypad
  1870   000E56  2403               	addwf	??_keypadPolling^0,w,c
  1871   000E58  6E05               	movwf	(??_keypadPolling+2)^0,c
  1872   000E5A  0E06               	movlw	high _keypad
  1873   000E5C  2004               	addwfc	(??_keypadPolling+1)^0,w,c
  1874   000E5E  6E06               	movwf	(??_keypadPolling+3)^0,c
  1875   000E60  500B               	movf	keypadPolling@j^0,w,c
  1876   000E62  5E05               	subwf	(??_keypadPolling+2)^0,f,c
  1877   000E64  500C               	movf	(keypadPolling@j+1)^0,w,c
  1878   000E66  5A06               	subwfb	(??_keypadPolling+3)^0,f,c
  1879   000E68  0E03               	movlw	3
  1880   000E6A  2605               	addwf	(??_keypadPolling+2)^0,f,c
  1881   000E6C  0E00               	movlw	0
  1882   000E6E  2206               	addwfc	(??_keypadPolling+3)^0,f,c
  1883   000E70  C005  FFF6         	movff	??_keypadPolling+2,tblptrl
  1884   000E74  C006  FFF7         	movff	??_keypadPolling+3,tblptrh
  1885   000E78                     	if	0	;tblptru may be non-zero
  1886   000E78                     	endif
  1887   000E78                     	if	0	;tblptru may be non-zero
  1888   000E78                     	endif
  1889   000E78  0008               	tblrd		*
  1890   000E7A  FFFF               	dw	65535	; errata NOP
  1891   000E7C  CFF5 F008          	movff	tablat,keypadPolling@pressedKey
  1892   000E80                     
  1893                           ;main.c: 425:                     keyDetected = 1;
  1894   000E80  0E01               	movlw	1
  1895   000E82  6E07               	movwf	keypadPolling@keyDetected^0,c
  1896                           
  1897                           ;main.c: 426:                 }
  1898   000E84  EF48  F007         	goto	l1280
  1899   000E88                     l1276:
  1900   000E88  FFFF               	dw	65535	; assembler added errata NOP
  1901                           
  1902                           ;main.c: 428:                     return 98;
  1903   000E8A  0E62               	movlw	98
  1904   000E8C  EF7B  F007         	goto	l303
  1905   000E90                     l1280:
  1906   000E90  FFFF               	dw	65535	; assembler added errata NOP
  1907                           
  1908                           ;main.c: 431:         }
  1909   000E92  4A0B               	infsnz	keypadPolling@j^0,f,c
  1910   000E94  2A0C               	incf	(keypadPolling@j+1)^0,f,c
  1911   000E96  BE0C               	btfsc	(keypadPolling@j+1)^0,7,c
  1912   000E98  EF57  F007         	goto	u281
  1913   000E9C  500C               	movf	(keypadPolling@j+1)^0,w,c
  1914   000E9E  E10A               	bnz	u280
  1915   000EA0  0E04               	movlw	4
  1916   000EA2  5C0B               	subwf	keypadPolling@j^0,w,c
  1917   000EA4  A0D8               	btfss	status,0,c
  1918   000EA6  EF57  F007         	goto	u281
  1919   000EAA  EF5A  F007         	goto	u280
  1920   000EAE                     u281:
  1921   000EAE  FFFF               	dw	65535	; assembler added errata NOP
  1922   000EB0  EFFB  F006         	goto	l1268
  1923   000EB4                     u280:
  1924   000EB4  FFFF               	dw	65535	; assembler added errata NOP
  1925   000EB6                     
  1926                           ;main.c: 432:     }
  1927   000EB6  4A09               	infsnz	keypadPolling@i^0,f,c
  1928   000EB8  2A0A               	incf	(keypadPolling@i+1)^0,f,c
  1929   000EBA  EFD0  F006         	goto	l1256
  1930   000EBE                     l1288:
  1931   000EBE  FFFF               	dw	65535	; assembler added errata NOP
  1932                           
  1933                           ;main.c: 433:     PORTB = 0x0F;
  1934   000EC0  0E0F               	movlw	15
  1935   000EC2  6E81               	movwf	129,c	;volatile
  1936   000EC4                     l1290:
  1937   000EC4  FFFF               	dw	65535	; assembler added errata NOP
  1938   000EC6  CF81 F003          	movff	3969,??_keypadPolling	;volatile
  1939   000ECA  0EF0               	movlw	240
  1940   000ECC  1603               	andwf	??_keypadPolling^0,f,c
  1941   000ECE  A4D8               	btfss	status,2,c
  1942   000ED0  EF6C  F007         	goto	u291
  1943   000ED4  EF6F  F007         	goto	u290
  1944   000ED8                     u291:
  1945   000ED8  FFFF               	dw	65535	; assembler added errata NOP
  1946   000EDA  EF62  F007         	goto	l1290
  1947   000EDE                     u290:
  1948   000EDE  FFFF               	dw	65535	; assembler added errata NOP
  1949   000EE0                     
  1950                           ;main.c: 435:     PORTB = 0x00;
  1951   000EE0  0E00               	movlw	0
  1952   000EE2  6E81               	movwf	129,c	;volatile
  1953   000EE4                     
  1954                           ;main.c: 436:     _delay((unsigned long)((50)*(4000000/4000.0)));
  1955   000EE4  0E31               	movlw	49
  1956   000EE6  6E03               	movwf	??_keypadPolling^0,c
  1957   000EE8  0EBB               	movlw	187
  1958   000EEA                     u1337:
  1959   000EEA  FFFF               	dw	65535	; errata NOP
  1960   000EEC  2EE8               	decfsz	wreg,f,c
  1961   000EEE  D7FD               	bra	u1337
  1962   000EF0  2E03               	decfsz	??_keypadPolling^0,f,c
  1963   000EF2  D7FB               	bra	u1337
  1964   000EF4                     
  1965                           ;main.c: 437:     return pressedKey;
  1966   000EF4  5008               	movf	keypadPolling@pressedKey^0,w,c
  1967   000EF6                     l303:
  1968   000EF6  FFFF               	dw	65535	; assembler added errata NOP
  1969   000EF8  0012               	return		;funcret
  1970   000EFA  FFFF               	dw	65535	; errata NOP
  1971   000EFC                     __end_of_keypadPolling:
  1972                           	callstack 0
  1973                           
  1974 ;; *************** function _erPolling *****************
  1975 ;; Defined at:
  1976 ;;		line 440 in file "main.c"
  1977 ;; Parameters:    Size  Location     Type
  1978 ;;		None
  1979 ;; Auto vars:     Size  Location     Type
  1980 ;;		None
  1981 ;; Return value:  Size  Location     Type
  1982 ;;                  1    wreg      _Bool 
  1983 ;; Registers used:
  1984 ;;		wreg
  1985 ;; Tracked objects:
  1986 ;;		On entry : 0/0
  1987 ;;		On exit  : 0/0
  1988 ;;		Unchanged: 0/0
  1989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1990 ;;      Params:         0       0       0       0       0       0       0
  1991 ;;      Locals:         0       0       0       0       0       0       0
  1992 ;;      Temps:          0       0       0       0       0       0       0
  1993 ;;      Totals:         0       0       0       0       0       0       0
  1994 ;;Total ram usage:        0 bytes
  1995 ;; Hardware stack levels used: 1
  1996 ;; Hardware stack levels required when called: 2
  1997 ;; This function calls:
  1998 ;;		Nothing
  1999 ;; This function is called by:
  2000 ;;		_main
  2001 ;;		_readMatchCode
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005                           	psect	text5
  2006   0014D6                     __ptext5:
  2007                           	callstack 0
  2008   0014D6                     _erPolling:
  2009                           	callstack 0
  2010   0014D6  FFFF               	dw	65535	; assembler added errata NOP
  2011   0014D8                     
  2012                           ;main.c: 441:     if(PORTDbits.RD0){
  2013   0014D8  A083               	btfss	131,0,c	;volatile
  2014   0014DA  EF71  F00A         	goto	u221
  2015   0014DE  EF74  F00A         	goto	u220
  2016   0014E2                     u221:
  2017   0014E2  FFFF               	dw	65535	; assembler added errata NOP
  2018   0014E4  EF78  F00A         	goto	l1250
  2019   0014E8                     u220:
  2020   0014E8  FFFF               	dw	65535	; assembler added errata NOP
  2021   0014EA                     
  2022                           ;main.c: 442:         return 1;
  2023   0014EA  0E01               	movlw	1
  2024   0014EC  EF7A  F00A         	goto	l310
  2025   0014F0                     l1250:
  2026   0014F0  FFFF               	dw	65535	; assembler added errata NOP
  2027                           
  2028                           ;main.c: 444:     return 0;
  2029   0014F2  0E00               	movlw	0
  2030   0014F4                     l310:
  2031   0014F4  FFFF               	dw	65535	; assembler added errata NOP
  2032   0014F6  0012               	return		;funcret
  2033   0014F8  FFFF               	dw	65535	; errata NOP
  2034   0014FA                     __end_of_erPolling:
  2035                           	callstack 0
  2036                           
  2037 ;; *************** function _pirPolling *****************
  2038 ;; Defined at:
  2039 ;;		line 447 in file "main.c"
  2040 ;; Parameters:    Size  Location     Type
  2041 ;;		None
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;		None
  2044 ;; Return value:  Size  Location     Type
  2045 ;;                  1    wreg      _Bool 
  2046 ;; Registers used:
  2047 ;;		wreg
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2053 ;;      Params:         0       0       0       0       0       0       0
  2054 ;;      Locals:         0       0       0       0       0       0       0
  2055 ;;      Temps:          0       0       0       0       0       0       0
  2056 ;;      Totals:         0       0       0       0       0       0       0
  2057 ;;Total ram usage:        0 bytes
  2058 ;; Hardware stack levels used: 1
  2059 ;; Hardware stack levels required when called: 2
  2060 ;; This function calls:
  2061 ;;		Nothing
  2062 ;; This function is called by:
  2063 ;;		_main
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067                           	psect	text6
  2068   0014FA                     __ptext6:
  2069                           	callstack 0
  2070   0014FA                     _pirPolling:
  2071                           	callstack 0
  2072   0014FA  FFFF               	dw	65535	; assembler added errata NOP
  2073   0014FC                     
  2074                           ;main.c: 448:     if(PORTCbits.RC0){
  2075   0014FC  A082               	btfss	130,0,c	;volatile
  2076   0014FE  EF83  F00A         	goto	u371
  2077   001502  EF86  F00A         	goto	u370
  2078   001506                     u371:
  2079   001506  FFFF               	dw	65535	; assembler added errata NOP
  2080   001508  EF8A  F00A         	goto	l1368
  2081   00150C                     u370:
  2082   00150C  FFFF               	dw	65535	; assembler added errata NOP
  2083   00150E                     
  2084                           ;main.c: 449:         return 1;
  2085   00150E  0E01               	movlw	1
  2086   001510  EF8C  F00A         	goto	l314
  2087   001514                     l1368:
  2088   001514  FFFF               	dw	65535	; assembler added errata NOP
  2089                           
  2090                           ;main.c: 451:     return 0;
  2091   001516  0E00               	movlw	0
  2092   001518                     l314:
  2093   001518  FFFF               	dw	65535	; assembler added errata NOP
  2094   00151A  0012               	return		;funcret
  2095   00151C  FFFF               	dw	65535	; errata NOP
  2096   00151E                     __end_of_pirPolling:
  2097                           	callstack 0
  2098                           
  2099 ;; *************** function _init *****************
  2100 ;; Defined at:
  2101 ;;		line 69 in file "main.c"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;		None
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;		None
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  1    wreg      void 
  2108 ;; Registers used:
  2109 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, tblptrl, tblptrh, tblptru, cstack
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2115 ;;      Params:         0       0       0       0       0       0       0
  2116 ;;      Locals:         0       0       0       0       0       0       0
  2117 ;;      Temps:          0       0       0       0       0       0       0
  2118 ;;      Totals:         0       0       0       0       0       0       0
  2119 ;;Total ram usage:        0 bytes
  2120 ;; Hardware stack levels used: 1
  2121 ;; Hardware stack levels required when called: 8
  2122 ;; This function calls:
  2123 ;;		_LCD_Init
  2124 ;;		_pwmSet
  2125 ;;		_setState
  2126 ;; This function is called by:
  2127 ;;		_main
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           	psect	text7
  2132   00131A                     __ptext7:
  2133                           	callstack 0
  2134   00131A                     _init:
  2135                           	callstack 0
  2136   00131A  FFFF               	dw	65535	; assembler added errata NOP
  2137   00131C                     
  2138                           ;main.c: 74:     TRISB = 0xF0;
  2139   00131C  0EF0               	movlw	240
  2140   00131E  6E93               	movwf	147,c	;volatile
  2141                           
  2142                           ;main.c: 75:     TRISC = 0x0D;
  2143   001320  0E0D               	movlw	13
  2144   001322  6E94               	movwf	148,c	;volatile
  2145                           
  2146                           ;main.c: 76:     TRISD = 0x21;
  2147   001324  0E21               	movlw	33
  2148   001326  6E95               	movwf	149,c	;volatile
  2149                           
  2150                           ;main.c: 81:     PORTB = 0x0F;
  2151   001328  0E0F               	movlw	15
  2152   00132A  6E81               	movwf	129,c	;volatile
  2153                           
  2154                           ;main.c: 82:     PORTC = 0x00;
  2155   00132C  0E00               	movlw	0
  2156   00132E  6E82               	movwf	130,c	;volatile
  2157                           
  2158                           ;main.c: 83:     PORTD = 0x80;
  2159   001330  0E80               	movlw	128
  2160   001332  6E83               	movwf	131,c	;volatile
  2161                           
  2162                           ;main.c: 91:     T0CON = 0x48;
  2163   001334  0E48               	movlw	72
  2164   001336  6ED5               	movwf	213,c	;volatile
  2165                           
  2166                           ;main.c: 92:     T1CON = 0x00;
  2167   001338  0E00               	movlw	0
  2168   00133A  6ECD               	movwf	205,c	;volatile
  2169                           
  2170                           ;main.c: 93:     T2CON = 0x06;
  2171   00133C  0E06               	movlw	6
  2172   00133E  6ECA               	movwf	202,c	;volatile
  2173   001340                     
  2174                           ;main.c: 94:     PR2 = 0xFF;
  2175   001340  68CB               	setf	203,c	;volatile
  2176                           
  2177                           ;main.c: 95:     CCP2CON = 0x0C;
  2178   001342  0E0C               	movlw	12
  2179   001344  6EBA               	movwf	186,c	;volatile
  2180                           
  2181                           ;main.c: 101:     INTCON = 0xA0;
  2182   001346  0EA0               	movlw	160
  2183   001348  6EF2               	movwf	242,c	;volatile
  2184                           
  2185                           ;main.c: 102:     INTCON2 = 0x80;
  2186   00134A  0E80               	movlw	128
  2187   00134C  6EF1               	movwf	241,c	;volatile
  2188                           
  2189                           ;main.c: 103:     INTCON3 = 0x00;
  2190   00134E  0E00               	movlw	0
  2191   001350  6EF0               	movwf	240,c	;volatile
  2192                           
  2193                           ;main.c: 104:     RCON = 0x00;
  2194   001352  0E00               	movlw	0
  2195   001354  6ED0               	movwf	208,c	;volatile
  2196   001356                     
  2197                           ;main.c: 106:     pwmSet(PWM_CLOSE);
  2198   001356  0E00               	movlw	0
  2199   001358  6E04               	movwf	(pwmSet@duty+1)^0,c
  2200   00135A  0EFA               	movlw	250
  2201   00135C  6E03               	movwf	pwmSet@duty^0,c
  2202   00135E  EC2E  F00A         	call	_pwmSet	;wreg free
  2203   001362                     
  2204                           ;main.c: 107:     LCD_Init();
  2205   001362  ECD4  F008         	call	_LCD_Init	;wreg free
  2206   001366                     
  2207                           ;main.c: 108:     setState(currentState);
  2208   001366  C034  F017         	movff	_currentState,setState@targetState
  2209   00136A  6A18               	clrf	(setState@targetState+1)^0,c
  2210   00136C  EC13  F008         	call	_setState	;wreg free
  2211   001370  0012               	return		;funcret
  2212   001372  FFFF               	dw	65535	; errata NOP
  2213   001374                     __end_of_init:
  2214                           	callstack 0
  2215                           
  2216 ;; *************** function _setState *****************
  2217 ;; Defined at:
  2218 ;;		line 297 in file "main.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;  targetState     2   22[COMRAM] int 
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;		None
  2223 ;; Return value:  Size  Location     Type
  2224 ;;                  1    wreg      void 
  2225 ;; Registers used:
  2226 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, tblptrl, tblptrh, tblptru, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2232 ;;      Params:         2       0       0       0       0       0       0
  2233 ;;      Locals:         0       0       0       0       0       0       0
  2234 ;;      Temps:          2       0       0       0       0       0       0
  2235 ;;      Totals:         4       0       0       0       0       0       0
  2236 ;;Total ram usage:        4 bytes
  2237 ;; Hardware stack levels used: 1
  2238 ;; Hardware stack levels required when called: 7
  2239 ;; This function calls:
  2240 ;;		_LCD_Clear
  2241 ;;		_LCD_Set_Cursor
  2242 ;;		_LCD_Write_String
  2243 ;;		_closeGate
  2244 ;;		_openGate
  2245 ;;		_toggleBuzzer
  2246 ;; This function is called by:
  2247 ;;		_init
  2248 ;;		_main
  2249 ;; This function uses a non-reentrant model
  2250 ;;
  2251                           
  2252                           	psect	text8
  2253   001026                     __ptext8:
  2254                           	callstack 0
  2255   001026                     _setState:
  2256                           	callstack 0
  2257   001026  FFFF               	dw	65535	; assembler added errata NOP
  2258   001028                     
  2259                           ;main.c: 298:     switch(targetState){
  2260   001028  EF6A  F008         	goto	l1776
  2261   00102C                     l1724:
  2262   00102C  FFFF               	dw	65535	; assembler added errata NOP
  2263                           
  2264                           ;main.c: 300:             currentState = 1;
  2265   00102E  0E01               	movlw	1
  2266   001030  6E34               	movwf	_currentState^0,c
  2267   001032                     
  2268                           ;main.c: 301:             LCD_Clear();
  2269   001032  EC8F  F00A         	call	_LCD_Clear	;wreg free
  2270   001036                     
  2271                           ;main.c: 302:             LCD_Write_String("Activated");
  2272   001036  0E62               	movlw	low STR_10
  2273   001038  6E07               	movwf	LCD_Write_String@str^0,c
  2274   00103A  0E06               	movlw	high STR_10
  2275   00103C  6E08               	movwf	(LCD_Write_String@str+1)^0,c
  2276   00103E  EC8D  F008         	call	_LCD_Write_String	;wreg free
  2277                           
  2278                           ;main.c: 303:             break;
  2279   001042  EF8A  F008         	goto	l256
  2280   001046                     l1730:
  2281   001046  FFFF               	dw	65535	; assembler added errata NOP
  2282                           
  2283                           ;main.c: 306:             currentState = 2;
  2284   001048  0E02               	movlw	2
  2285   00104A  6E34               	movwf	_currentState^0,c
  2286   00104C                     
  2287                           ;main.c: 307:             PORTDbits.RD6 = 0;
  2288   00104C  9C83               	bcf	131,6,c	;volatile
  2289   00104E                     
  2290                           ;main.c: 308:             closeGate();
  2291   00104E  ECBD  F00A         	call	_closeGate	;wreg free
  2292   001052                     
  2293                           ;main.c: 309:             LCD_Clear();
  2294   001052  EC8F  F00A         	call	_LCD_Clear	;wreg free
  2295   001056                     
  2296                           ;main.c: 310:             LCD_Write_String("Gate Closed");
  2297   001056  0E4A               	movlw	low STR_11
  2298   001058  6E07               	movwf	LCD_Write_String@str^0,c
  2299   00105A  0E06               	movlw	high STR_11
  2300   00105C  6E08               	movwf	(LCD_Write_String@str+1)^0,c
  2301   00105E  EC8D  F008         	call	_LCD_Write_String	;wreg free
  2302                           
  2303                           ;main.c: 311:             break;
  2304   001062  EF8A  F008         	goto	l256
  2305   001066                     l1740:
  2306   001066  FFFF               	dw	65535	; assembler added errata NOP
  2307                           
  2308                           ;main.c: 314:             currentState = 3;
  2309   001068  0E03               	movlw	3
  2310   00106A  6E34               	movwf	_currentState^0,c
  2311   00106C                     
  2312                           ;main.c: 315:             LCD_Clear();
  2313   00106C  EC8F  F00A         	call	_LCD_Clear	;wreg free
  2314   001070                     
  2315                           ;main.c: 316:             LCD_Write_String("Gate Opened");
  2316   001070  0E3E               	movlw	low STR_12
  2317   001072  6E07               	movwf	LCD_Write_String@str^0,c
  2318   001074  0E06               	movlw	high STR_12
  2319   001076  6E08               	movwf	(LCD_Write_String@str+1)^0,c
  2320   001078  EC8D  F008         	call	_LCD_Write_String	;wreg free
  2321   00107C                     
  2322                           ;main.c: 317:             PORTDbits.RD6 = 1;
  2323   00107C  8C83               	bsf	131,6,c	;volatile
  2324   00107E                     l1748:
  2325   00107E  FFFF               	dw	65535	; assembler added errata NOP
  2326                           
  2327                           ;main.c: 318:             openGate();
  2328   001080  ECAF  F00A         	call	_openGate	;wreg free
  2329                           
  2330                           ;main.c: 319:             break;
  2331   001084  EF8A  F008         	goto	l256
  2332   001088                     l1750:
  2333   001088  FFFF               	dw	65535	; assembler added errata NOP
  2334                           
  2335                           ;main.c: 322:             currentState = 4;
  2336   00108A  0E04               	movlw	4
  2337   00108C  6E34               	movwf	_currentState^0,c
  2338   00108E                     
  2339                           ;main.c: 323:             toggleBuzzer(1);
  2340   00108E  0E01               	movlw	1
  2341   001090  ECBA  F009         	call	_toggleBuzzer
  2342   001094                     
  2343                           ;main.c: 324:             T0CONbits.TMR0ON = 1;
  2344   001094  8ED5               	bsf	213,7,c	;volatile
  2345   001096                     
  2346                           ;main.c: 325:             LCD_Clear();
  2347   001096  EC8F  F00A         	call	_LCD_Clear	;wreg free
  2348   00109A                     
  2349                           ;main.c: 326:             LCD_Write_String("99: Gate Open");
  2350   00109A  0E30               	movlw	low STR_13
  2351   00109C  6E07               	movwf	LCD_Write_String@str^0,c
  2352   00109E  0E06               	movlw	high STR_13
  2353   0010A0  6E08               	movwf	(LCD_Write_String@str+1)^0,c
  2354   0010A2  EC8D  F008         	call	_LCD_Write_String	;wreg free
  2355   0010A6  EF3F  F008         	goto	l1748
  2356   0010AA                     l1762:
  2357   0010AA  FFFF               	dw	65535	; assembler added errata NOP
  2358                           
  2359                           ;main.c: 331:             currentState = 0;
  2360   0010AC  0E00               	movlw	0
  2361   0010AE  6E34               	movwf	_currentState^0,c
  2362   0010B0                     
  2363                           ;main.c: 332:             PORTDbits.RD6 = 1;
  2364   0010B0  8C83               	bsf	131,6,c	;volatile
  2365   0010B2                     
  2366                           ;main.c: 333:             closeGate();
  2367   0010B2  ECBD  F00A         	call	_closeGate	;wreg free
  2368   0010B6                     
  2369                           ;main.c: 334:             LCD_Clear();
  2370   0010B6  EC8F  F00A         	call	_LCD_Clear	;wreg free
  2371   0010BA                     
  2372                           ;main.c: 335:             LCD_Set_Cursor(1,1);
  2373   0010BA  0E01               	movlw	1
  2374   0010BC  6E05               	movwf	LCD_Set_Cursor@c^0,c
  2375   0010BE  0E01               	movlw	1
  2376   0010C0  EC54  F009         	call	_LCD_Set_Cursor
  2377   0010C4                     
  2378                           ;main.c: 336:             LCD_Write_String("Deactivated");
  2379   0010C4  0E56               	movlw	low STR_4
  2380   0010C6  6E07               	movwf	LCD_Write_String@str^0,c
  2381   0010C8  0E06               	movlw	high STR_4
  2382   0010CA  6E08               	movwf	(LCD_Write_String@str+1)^0,c
  2383   0010CC  EC8D  F008         	call	_LCD_Write_String	;wreg free
  2384                           
  2385                           ;main.c: 337:             break;
  2386   0010D0  EF8A  F008         	goto	l256
  2387   0010D4                     l1776:
  2388   0010D4  FFFF               	dw	65535	; assembler added errata NOP
  2389   0010D6  C017  F019         	movff	setState@targetState,??_setState
  2390   0010DA  C018  F01A         	movff	setState@targetState+1,??_setState+1
  2391                           
  2392                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2393                           ; Switch size 1, requested type "simple"
  2394                           ; Number of cases is 1, Range of values is 0 to 0
  2395                           ; switch strategies available:
  2396                           ; Name         Instructions Cycles
  2397                           ; simple_byte            4     3 (average)
  2398                           ;	Chosen strategy is simple_byte
  2399   0010DE  501A               	movf	(??_setState+1)^0,w,c
  2400   0010E0  0A00               	xorlw	0	; case 0
  2401   0010E2  B4D8               	btfsc	status,2,c
  2402   0010E4  EF76  F008         	goto	l2084
  2403   0010E8  EF55  F008         	goto	l1762
  2404   0010EC                     l2084:
  2405   0010EC  FFFF               	dw	65535	; assembler added errata NOP
  2406                           
  2407                           ; Switch size 1, requested type "simple"
  2408                           ; Number of cases is 4, Range of values is 1 to 4
  2409                           ; switch strategies available:
  2410                           ; Name         Instructions Cycles
  2411                           ; simple_byte           13     7 (average)
  2412                           ;	Chosen strategy is simple_byte
  2413   0010EE  5019               	movf	??_setState^0,w,c
  2414   0010F0  0A01               	xorlw	1	; case 1
  2415   0010F2  B4D8               	btfsc	status,2,c
  2416   0010F4  EF16  F008         	goto	l1724
  2417   0010F8  0A03               	xorlw	3	; case 2
  2418   0010FA  B4D8               	btfsc	status,2,c
  2419   0010FC  EF23  F008         	goto	l1730
  2420   001100  0A01               	xorlw	1	; case 3
  2421   001102  B4D8               	btfsc	status,2,c
  2422   001104  EF33  F008         	goto	l1740
  2423   001108  0A07               	xorlw	7	; case 4
  2424   00110A  B4D8               	btfsc	status,2,c
  2425   00110C  EF44  F008         	goto	l1750
  2426   001110  EF55  F008         	goto	l1762
  2427   001114                     l256:
  2428   001114  FFFF               	dw	65535	; assembler added errata NOP
  2429   001116  0012               	return		;funcret
  2430   001118  FFFF               	dw	65535	; errata NOP
  2431   00111A                     __end_of_setState:
  2432                           	callstack 0
  2433                           
  2434 ;; *************** function _toggleBuzzer *****************
  2435 ;; Defined at:
  2436 ;;		line 353 in file "main.c"
  2437 ;; Parameters:    Size  Location     Type
  2438 ;;  isEmergency     1    wreg     _Bool 
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;  isEmergency     1    3[COMRAM] _Bool 
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  1    wreg      void 
  2443 ;; Registers used:
  2444 ;;		wreg, status,2, status,0
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2450 ;;      Params:         0       0       0       0       0       0       0
  2451 ;;      Locals:         1       0       0       0       0       0       0
  2452 ;;      Temps:          1       0       0       0       0       0       0
  2453 ;;      Totals:         2       0       0       0       0       0       0
  2454 ;;Total ram usage:        2 bytes
  2455 ;; Hardware stack levels used: 1
  2456 ;; Hardware stack levels required when called: 2
  2457 ;; This function calls:
  2458 ;;		Nothing
  2459 ;; This function is called by:
  2460 ;;		_setState
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464                           	psect	text9
  2465   001374                     __ptext9:
  2466                           	callstack 0
  2467   001374                     _toggleBuzzer:
  2468                           	callstack 0
  2469   001374  FFFF               	dw	65535	; assembler added errata NOP
  2470                           
  2471                           ;incstack = 0
  2472                           ;toggleBuzzer@isEmergency stored from wreg
  2473   001376  6E04               	movwf	toggleBuzzer@isEmergency^0,c
  2474   001378                     
  2475                           ;main.c: 354:     PORTDbits.RD1 =! PORTDbits.RD1;
  2476   001378  A283               	btfss	131,1,c	;volatile
  2477   00137A  EFC1  F009         	goto	u181
  2478   00137E  EFC6  F009         	goto	u180
  2479   001382                     u181:
  2480   001382  FFFF               	dw	65535	; assembler added errata NOP
  2481   001384  6A03               	clrf	??_toggleBuzzer^0,c
  2482   001386  2A03               	incf	??_toggleBuzzer^0,f,c
  2483   001388  EFC8  F009         	goto	u198
  2484   00138C                     u180:
  2485   00138C  FFFF               	dw	65535	; assembler added errata NOP
  2486   00138E  6A03               	clrf	??_toggleBuzzer^0,c
  2487   001390                     u198:
  2488   001390  FFFF               	dw	65535	; assembler added errata NOP
  2489   001392  4603               	rlncf	??_toggleBuzzer^0,f,c
  2490   001394  5083               	movf	131,w,c	;volatile
  2491   001396  1803               	xorwf	??_toggleBuzzer^0,w,c
  2492   001398  0BFD               	andlw	-3
  2493   00139A  1803               	xorwf	??_toggleBuzzer^0,w,c
  2494   00139C  6E83               	movwf	131,c	;volatile
  2495   00139E                     
  2496                           ;main.c: 355:     if(isEmergency){
  2497   00139E  5004               	movf	toggleBuzzer@isEmergency^0,w,c
  2498   0013A0  B4D8               	btfsc	status,2,c
  2499   0013A2  EFD5  F009         	goto	u201
  2500   0013A6  EFD8  F009         	goto	u200
  2501   0013AA                     u201:
  2502   0013AA  FFFF               	dw	65535	; assembler added errata NOP
  2503   0013AC  EFDE  F009         	goto	l269
  2504   0013B0                     u200:
  2505   0013B0  FFFF               	dw	65535	; assembler added errata NOP
  2506   0013B2                     
  2507                           ;main.c: 356:         PORTDbits.RD6 = PORTDbits.RD1;
  2508   0013B2  A283               	btfss	131,1,c	;volatile
  2509   0013B4  D002               	bra	u215
  2510   0013B6  8C83               	bsf	131,6,c	;volatile
  2511   0013B8  D001               	bra	u217
  2512   0013BA                     u215:
  2513   0013BA  9C83               	bcf	131,6,c	;volatile
  2514   0013BC                     u217:
  2515   0013BC                     l269:
  2516   0013BC  FFFF               	dw	65535	; assembler added errata NOP
  2517   0013BE  0012               	return		;funcret
  2518   0013C0  FFFF               	dw	65535	; errata NOP
  2519   0013C2                     __end_of_toggleBuzzer:
  2520                           	callstack 0
  2521                           
  2522 ;; *************** function _openGate *****************
  2523 ;; Defined at:
  2524 ;;		line 345 in file "main.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;		None
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;		None
  2529 ;; Return value:  Size  Location     Type
  2530 ;;                  1    wreg      void 
  2531 ;; Registers used:
  2532 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, tblptrl, tblptrh, tblptru, cstack
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2538 ;;      Params:         0       0       0       0       0       0       0
  2539 ;;      Locals:         0       0       0       0       0       0       0
  2540 ;;      Temps:          0       0       0       0       0       0       0
  2541 ;;      Totals:         0       0       0       0       0       0       0
  2542 ;;Total ram usage:        0 bytes
  2543 ;; Hardware stack levels used: 1
  2544 ;; Hardware stack levels required when called: 6
  2545 ;; This function calls:
  2546 ;;		_handleGate
  2547 ;; This function is called by:
  2548 ;;		_setState
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           	psect	text10
  2553   00155E                     __ptext10:
  2554                           	callstack 0
  2555   00155E                     _openGate:
  2556                           	callstack 0
  2557   00155E  FFFF               	dw	65535	; assembler added errata NOP
  2558   001560                     
  2559                           ;main.c: 346:     handleGate(1, &gateState, &pwmSet);
  2560   001560  0E35               	movlw	low _gateState
  2561   001562  6E0D               	movwf	handleGate@isOpen^0,c
  2562   001564  0E00               	movlw	high _gateState
  2563   001566  6E0E               	movwf	(handleGate@isOpen+1)^0,c
  2564   001568  0E5C               	movlw	low _pwmSet
  2565   00156A  6E0F               	movwf	handleGate@callback^0,c
  2566   00156C  0E14               	movlw	high _pwmSet
  2567   00156E  6E10               	movwf	(handleGate@callback+1)^0,c
  2568   001570  0E01               	movlw	1
  2569   001572  EC0B  F006         	call	_handleGate
  2570   001576  0012               	return		;funcret
  2571   001578  FFFF               	dw	65535	; errata NOP
  2572   00157A                     __end_of_openGate:
  2573                           	callstack 0
  2574                           
  2575 ;; *************** function _closeGate *****************
  2576 ;; Defined at:
  2577 ;;		line 341 in file "main.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;		None
  2580 ;; Auto vars:     Size  Location     Type
  2581 ;;		None
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  1    wreg      void 
  2584 ;; Registers used:
  2585 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, tblptrl, tblptrh, tblptru, cstack
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2591 ;;      Params:         0       0       0       0       0       0       0
  2592 ;;      Locals:         0       0       0       0       0       0       0
  2593 ;;      Temps:          0       0       0       0       0       0       0
  2594 ;;      Totals:         0       0       0       0       0       0       0
  2595 ;;Total ram usage:        0 bytes
  2596 ;; Hardware stack levels used: 1
  2597 ;; Hardware stack levels required when called: 6
  2598 ;; This function calls:
  2599 ;;		_handleGate
  2600 ;; This function is called by:
  2601 ;;		_setState
  2602 ;; This function uses a non-reentrant model
  2603 ;;
  2604                           
  2605                           	psect	text11
  2606   00157A                     __ptext11:
  2607                           	callstack 0
  2608   00157A                     _closeGate:
  2609                           	callstack 0
  2610   00157A  FFFF               	dw	65535	; assembler added errata NOP
  2611   00157C                     
  2612                           ;main.c: 342:     handleGate(0, &gateState, &pwmSet);
  2613   00157C  0E35               	movlw	low _gateState
  2614   00157E  6E0D               	movwf	handleGate@isOpen^0,c
  2615   001580  0E00               	movlw	high _gateState
  2616   001582  6E0E               	movwf	(handleGate@isOpen+1)^0,c
  2617   001584  0E5C               	movlw	low _pwmSet
  2618   001586  6E0F               	movwf	handleGate@callback^0,c
  2619   001588  0E14               	movlw	high _pwmSet
  2620   00158A  6E10               	movwf	(handleGate@callback+1)^0,c
  2621   00158C  0E00               	movlw	0
  2622   00158E  EC0B  F006         	call	_handleGate
  2623   001592  0012               	return		;funcret
  2624   001594  FFFF               	dw	65535	; errata NOP
  2625   001596                     __end_of_closeGate:
  2626                           	callstack 0
  2627                           
  2628 ;; *************** function _handleGate *****************
  2629 ;; Defined at:
  2630 ;;		line 363 in file "main.c"
  2631 ;; Parameters:    Size  Location     Type
  2632 ;;  toOpen          1    wreg     _Bool 
  2633 ;;  isOpen          2   12[COMRAM] PTR _Bool 
  2634 ;;		 -> gateState(1), 
  2635 ;;  callback        2   14[COMRAM] PTR FTN(int ,)void 
  2636 ;;		 -> pwmSet(1), 
  2637 ;; Auto vars:     Size  Location     Type
  2638 ;;  toOpen          1   17[COMRAM] _Bool 
  2639 ;;  i               2   20[COMRAM] int 
  2640 ;;  i               2   18[COMRAM] int 
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  1    wreg      void 
  2643 ;; Registers used:
  2644 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, tblptrl, tblptrh, tblptru, cstack
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2650 ;;      Params:         4       0       0       0       0       0       0
  2651 ;;      Locals:         5       0       0       0       0       0       0
  2652 ;;      Temps:          1       0       0       0       0       0       0
  2653 ;;      Totals:        10       0       0       0       0       0       0
  2654 ;;Total ram usage:       10 bytes
  2655 ;; Hardware stack levels used: 1
  2656 ;; Hardware stack levels required when called: 5
  2657 ;; This function calls:
  2658 ;;		_LCD_Clear
  2659 ;;		_LCD_Set_Cursor
  2660 ;;		_LCD_Write_String
  2661 ;;		_disableBuzzer
  2662 ;;		_pwmSet
  2663 ;; This function is called by:
  2664 ;;		_closeGate
  2665 ;;		_openGate
  2666 ;; This function uses a non-reentrant model
  2667 ;;
  2668                           
  2669                           	psect	text12
  2670   000C16                     __ptext12:
  2671                           	callstack 0
  2672   000C16                     _handleGate:
  2673                           	callstack 0
  2674   000C16  FFFF               	dw	65535	; assembler added errata NOP
  2675                           
  2676                           ;incstack = 0
  2677                           ;handleGate@toOpen stored from wreg
  2678   000C18  6E12               	movwf	handleGate@toOpen^0,c
  2679   000C1A                     
  2680                           ;main.c: 366:     if(toOpen && !*isOpen){
  2681   000C1A  5012               	movf	handleGate@toOpen^0,w,c
  2682   000C1C  B4D8               	btfsc	status,2,c
  2683   000C1E  EF13  F006         	goto	u781
  2684   000C22  EF16  F006         	goto	u780
  2685   000C26                     u781:
  2686   000C26  FFFF               	dw	65535	; assembler added errata NOP
  2687   000C28  EF60  F006         	goto	l1688
  2688   000C2C                     u780:
  2689   000C2C  FFFF               	dw	65535	; assembler added errata NOP
  2690   000C2E  C00D  FFD9         	movff	handleGate@isOpen,fsr2l
  2691   000C32  C00E  FFDA         	movff	handleGate@isOpen+1,fsr2h
  2692   000C36  50DF               	movf	indf2,w,c
  2693   000C38  A4D8               	btfss	status,2,c
  2694   000C3A  EF21  F006         	goto	u791
  2695   000C3E  EF24  F006         	goto	u790
  2696   000C42                     u791:
  2697   000C42  FFFF               	dw	65535	; assembler added errata NOP
  2698   000C44  EF60  F006         	goto	l1688
  2699   000C48                     u790:
  2700   000C48  FFFF               	dw	65535	; assembler added errata NOP
  2701   000C4A                     
  2702                           ;main.c: 367:         for(int i = PWM_CLOSE; i < PWM_OPEN; i++){
  2703   000C4A  0E00               	movlw	0
  2704   000C4C  6E14               	movwf	(handleGate@i+1)^0,c
  2705   000C4E  0EFA               	movlw	250
  2706   000C50  6E13               	movwf	handleGate@i^0,c
  2707   000C52                     l1678:
  2708   000C52  FFFF               	dw	65535	; assembler added errata NOP
  2709                           
  2710                           ;main.c: 368:             _delay((unsigned long)((35)*(4000000/4000.0)));
  2711   000C54  0E23               	movlw	35
  2712   000C56  6E11               	movwf	??_handleGate^0,c
  2713   000C58  0E1C               	movlw	28
  2714   000C5A                     u1347:
  2715   000C5A  FFFF               	dw	65535	; errata NOP
  2716   000C5C  2EE8               	decfsz	wreg,f,c
  2717   000C5E  D7FD               	bra	u1347
  2718   000C60  2E11               	decfsz	??_handleGate^0,f,c
  2719   000C62  D7FB               	bra	u1347
  2720   000C64                     
  2721                           ;main.c: 369:             callback(i);
  2722   000C64  C013  F003         	movff	handleGate@i,pwmSet@duty
  2723   000C68  C014  F004         	movff	handleGate@i+1,pwmSet@duty+1
  2724   000C6C  D802               	call	u808
  2725   000C6E  EF45  F006         	goto	u809
  2726   000C72                     u808:
  2727   000C72  FFFF               	dw	65535	; assembler added errata NOP
  2728   000C74  0005               	push	
  2729   000C76  6EFA               	movwf	pclath,c
  2730   000C78  500F               	movf	handleGate@callback^0,w,c
  2731   000C7A  6EFD               	movwf	tosl,c
  2732   000C7C  5010               	movf	(handleGate@callback+1)^0,w,c
  2733   000C7E  6EFE               	movwf	tosh,c
  2734   000C80  50F8               	movf	tblptru,w,c
  2735   000C82  6EFF               	movwf	tosu,c
  2736   000C84  50FA               	movf	pclath,w,c
  2737   000C86  0012               	return		;indir
  2738   000C88  FFFF               	dw	65535	; errata NOP
  2739   000C8A                     u809:
  2740   000C8A  FFFF               	dw	65535	; assembler added errata NOP
  2741   000C8C                     
  2742                           ;main.c: 370:         }
  2743   000C8C  4A13               	infsnz	handleGate@i^0,f,c
  2744   000C8E  2A14               	incf	(handleGate@i+1)^0,f,c
  2745   000C90  BE14               	btfsc	(handleGate@i+1)^0,7,c
  2746   000C92  EF54  F006         	goto	u811
  2747   000C96  0EDB               	movlw	219
  2748   000C98  5C13               	subwf	handleGate@i^0,w,c
  2749   000C9A  0E01               	movlw	1
  2750   000C9C  5814               	subwfb	(handleGate@i+1)^0,w,c
  2751   000C9E  A0D8               	btfss	status,0,c
  2752   000CA0  EF54  F006         	goto	u811
  2753   000CA4  EF57  F006         	goto	u810
  2754   000CA8                     u811:
  2755   000CA8  FFFF               	dw	65535	; assembler added errata NOP
  2756   000CAA  EF29  F006         	goto	l1678
  2757   000CAE                     u810:
  2758   000CAE  FFFF               	dw	65535	; assembler added errata NOP
  2759   000CB0                     
  2760                           ;main.c: 371:         *isOpen = 1;
  2761   000CB0  C00D  FFD9         	movff	handleGate@isOpen,fsr2l
  2762   000CB4  C00E  FFDA         	movff	handleGate@isOpen+1,fsr2h
  2763   000CB8  0E01               	movlw	1
  2764   000CBA  6EDF               	movwf	indf2,c
  2765                           
  2766                           ;main.c: 372:     }
  2767   000CBC  EFC4  F006         	goto	l279
  2768   000CC0                     l1688:
  2769   000CC0  FFFF               	dw	65535	; assembler added errata NOP
  2770   000CC2  5012               	movf	handleGate@toOpen^0,w,c
  2771   000CC4  A4D8               	btfss	status,2,c
  2772   000CC6  EF67  F006         	goto	u821
  2773   000CCA  EF6A  F006         	goto	u820
  2774   000CCE                     u821:
  2775   000CCE  FFFF               	dw	65535	; assembler added errata NOP
  2776   000CD0  EFC4  F006         	goto	l279
  2777   000CD4                     u820:
  2778   000CD4  FFFF               	dw	65535	; assembler added errata NOP
  2779   000CD6  C00D  FFD9         	movff	handleGate@isOpen,fsr2l
  2780   000CDA  C00E  FFDA         	movff	handleGate@isOpen+1,fsr2h
  2781   000CDE  50DF               	movf	indf2,w,c
  2782   000CE0  B4D8               	btfsc	status,2,c
  2783   000CE2  EF75  F006         	goto	u831
  2784   000CE6  EF78  F006         	goto	u830
  2785   000CEA                     u831:
  2786   000CEA  FFFF               	dw	65535	; assembler added errata NOP
  2787   000CEC  EFC4  F006         	goto	l279
  2788   000CF0                     u830:
  2789   000CF0  FFFF               	dw	65535	; assembler added errata NOP
  2790   000CF2                     
  2791                           ;main.c: 376:         LCD_Clear();
  2792   000CF2  EC8F  F00A         	call	_LCD_Clear	;wreg free
  2793   000CF6                     
  2794                           ;main.c: 377:         LCD_Set_Cursor(1,1);
  2795   000CF6  0E01               	movlw	1
  2796   000CF8  6E05               	movwf	LCD_Set_Cursor@c^0,c
  2797   000CFA  0E01               	movlw	1
  2798   000CFC  EC54  F009         	call	_LCD_Set_Cursor
  2799   000D00                     
  2800                           ;main.c: 378:         LCD_Write_String("Close");
  2801   000D00  0E6C               	movlw	low STR_15
  2802   000D02  6E07               	movwf	LCD_Write_String@str^0,c
  2803   000D04  0E06               	movlw	high STR_15
  2804   000D06  6E08               	movwf	(LCD_Write_String@str+1)^0,c
  2805   000D08  EC8D  F008         	call	_LCD_Write_String	;wreg free
  2806   000D0C                     
  2807                           ;main.c: 379:         T0CONbits.TMR0ON = 1;
  2808   000D0C  8ED5               	bsf	213,7,c	;volatile
  2809   000D0E                     
  2810                           ;main.c: 380:         for(int i = PWM_OPEN; i > PWM_CLOSE; i--){
  2811   000D0E  0E01               	movlw	1
  2812   000D10  6E16               	movwf	(handleGate@i_473+1)^0,c
  2813   000D12  0EDB               	movlw	219
  2814   000D14  6E15               	movwf	handleGate@i_473^0,c
  2815   000D16                     l1706:
  2816   000D16  FFFF               	dw	65535	; assembler added errata NOP
  2817                           
  2818                           ;main.c: 381:             _delay((unsigned long)((50)*(4000000/4000.0)));
  2819   000D18  0E31               	movlw	49
  2820   000D1A  6E11               	movwf	??_handleGate^0,c
  2821   000D1C  0EBB               	movlw	187
  2822   000D1E                     u1357:
  2823   000D1E  FFFF               	dw	65535	; errata NOP
  2824   000D20  2EE8               	decfsz	wreg,f,c
  2825   000D22  D7FD               	bra	u1357
  2826   000D24  2E11               	decfsz	??_handleGate^0,f,c
  2827   000D26  D7FB               	bra	u1357
  2828   000D28                     
  2829                           ;main.c: 382:             callback(i);
  2830   000D28  C015  F003         	movff	handleGate@i_473,pwmSet@duty
  2831   000D2C  C016  F004         	movff	handleGate@i_473+1,pwmSet@duty+1
  2832   000D30  D802               	call	u848
  2833   000D32  EFA7  F006         	goto	u849
  2834   000D36                     u848:
  2835   000D36  FFFF               	dw	65535	; assembler added errata NOP
  2836   000D38  0005               	push	
  2837   000D3A  6EFA               	movwf	pclath,c
  2838   000D3C  500F               	movf	handleGate@callback^0,w,c
  2839   000D3E  6EFD               	movwf	tosl,c
  2840   000D40  5010               	movf	(handleGate@callback+1)^0,w,c
  2841   000D42  6EFE               	movwf	tosh,c
  2842   000D44  50F8               	movf	tblptru,w,c
  2843   000D46  6EFF               	movwf	tosu,c
  2844   000D48  50FA               	movf	pclath,w,c
  2845   000D4A  0012               	return		;indir
  2846   000D4C  FFFF               	dw	65535	; errata NOP
  2847   000D4E                     u849:
  2848   000D4E  FFFF               	dw	65535	; assembler added errata NOP
  2849   000D50                     
  2850                           ;main.c: 383:         }
  2851   000D50  0615               	decf	handleGate@i_473^0,f,c
  2852   000D52  A0D8               	btfss	status,0,c
  2853   000D54  0616               	decf	(handleGate@i_473+1)^0,f,c
  2854   000D56  BE16               	btfsc	(handleGate@i_473+1)^0,7,c
  2855   000D58  EFBA  F006         	goto	u850
  2856   000D5C  5016               	movf	(handleGate@i_473+1)^0,w,c
  2857   000D5E  E107               	bnz	u851
  2858   000D60  0EFB               	movlw	251
  2859   000D62  5C15               	subwf	handleGate@i_473^0,w,c
  2860   000D64  B0D8               	btfsc	status,0,c
  2861   000D66  EFB7  F006         	goto	u851
  2862   000D6A  EFBA  F006         	goto	u850
  2863   000D6E                     u851:
  2864   000D6E  FFFF               	dw	65535	; assembler added errata NOP
  2865   000D70  EF8B  F006         	goto	l1706
  2866   000D74                     u850:
  2867   000D74  FFFF               	dw	65535	; assembler added errata NOP
  2868   000D76                     
  2869                           ;main.c: 384:         T0CONbits.TMR0ON = 0;
  2870   000D76  9ED5               	bcf	213,7,c	;volatile
  2871   000D78                     
  2872                           ;main.c: 385:         disableBuzzer();
  2873   000D78  ECD8  F00A         	call	_disableBuzzer	;wreg free
  2874   000D7C                     
  2875                           ;main.c: 386:         *isOpen = 0;
  2876   000D7C  C00D  FFD9         	movff	handleGate@isOpen,fsr2l
  2877   000D80  C00E  FFDA         	movff	handleGate@isOpen+1,fsr2h
  2878   000D84  0E00               	movlw	0
  2879   000D86  6EDF               	movwf	indf2,c
  2880   000D88                     l279:
  2881   000D88  FFFF               	dw	65535	; assembler added errata NOP
  2882   000D8A  0012               	return		;funcret
  2883   000D8C  FFFF               	dw	65535	; errata NOP
  2884   000D8E                     __end_of_handleGate:
  2885                           	callstack 0
  2886                           
  2887 ;; *************** function _pwmSet *****************
  2888 ;; Defined at:
  2889 ;;		line 289 in file "main.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;  duty            2    2[COMRAM] int 
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;		None
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  1    wreg      void 
  2896 ;; Registers used:
  2897 ;;		wreg, status,2, status,0
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2903 ;;      Params:         2       0       0       0       0       0       0
  2904 ;;      Locals:         0       0       0       0       0       0       0
  2905 ;;      Temps:          2       0       0       0       0       0       0
  2906 ;;      Totals:         4       0       0       0       0       0       0
  2907 ;;Total ram usage:        4 bytes
  2908 ;; Hardware stack levels used: 1
  2909 ;; Hardware stack levels required when called: 2
  2910 ;; This function calls:
  2911 ;;		Nothing
  2912 ;; This function is called by:
  2913 ;;		_init
  2914 ;;		_closeGate
  2915 ;;		_openGate
  2916 ;;		_handleGate
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           	psect	text13
  2921   00145C                     __ptext13:
  2922                           	callstack 0
  2923   00145C                     _pwmSet:
  2924                           	callstack 0
  2925   00145C  FFFF               	dw	65535	; assembler added errata NOP
  2926   00145E                     
  2927                           ;main.c: 290:     CCP2CONbits.DC2B = (char)(duty & 0x03);
  2928   00145E  C003  F005         	movff	pwmSet@duty,??_pwmSet
  2929   001462  0E03               	movlw	3
  2930   001464  1605               	andwf	??_pwmSet^0,f,c
  2931   001466  3A05               	swapf	??_pwmSet^0,f,c
  2932   001468  50BA               	movf	186,w,c	;volatile
  2933   00146A  1805               	xorwf	??_pwmSet^0,w,c
  2934   00146C  0BCF               	andlw	-49
  2935   00146E  1805               	xorwf	??_pwmSet^0,w,c
  2936   001470  6EBA               	movwf	186,c	;volatile
  2937                           
  2938                           ;main.c: 291:     CCPR2L = (char)(duty >> 2);
  2939   001472  C003  F005         	movff	pwmSet@duty,??_pwmSet
  2940   001476  C004  F006         	movff	pwmSet@duty+1,??_pwmSet+1
  2941   00147A  3406               	rlcf	(??_pwmSet+1)^0,w,c
  2942   00147C  3206               	rrcf	(??_pwmSet+1)^0,f,c
  2943   00147E  3205               	rrcf	??_pwmSet^0,f,c
  2944   001480  3406               	rlcf	(??_pwmSet+1)^0,w,c
  2945   001482  3206               	rrcf	(??_pwmSet+1)^0,f,c
  2946   001484  3205               	rrcf	??_pwmSet^0,f,c
  2947   001486  5005               	movf	??_pwmSet^0,w,c
  2948   001488  6EBB               	movwf	187,c	;volatile
  2949   00148A  0012               	return		;funcret
  2950   00148C  FFFF               	dw	65535	; errata NOP
  2951   00148E                     __end_of_pwmSet:
  2952                           	callstack 0
  2953                           
  2954 ;; *************** function _disableBuzzer *****************
  2955 ;; Defined at:
  2956 ;;		line 349 in file "main.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;		None
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;		None
  2961 ;; Return value:  Size  Location     Type
  2962 ;;                  1    wreg      void 
  2963 ;; Registers used:
  2964 ;;		None
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2970 ;;      Params:         0       0       0       0       0       0       0
  2971 ;;      Locals:         0       0       0       0       0       0       0
  2972 ;;      Temps:          0       0       0       0       0       0       0
  2973 ;;      Totals:         0       0       0       0       0       0       0
  2974 ;;Total ram usage:        0 bytes
  2975 ;; Hardware stack levels used: 1
  2976 ;; Hardware stack levels required when called: 2
  2977 ;; This function calls:
  2978 ;;		Nothing
  2979 ;; This function is called by:
  2980 ;;		_handleGate
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           	psect	text14
  2985   0015B0                     __ptext14:
  2986                           	callstack 0
  2987   0015B0                     _disableBuzzer:
  2988                           	callstack 0
  2989   0015B0  FFFF               	dw	65535	; assembler added errata NOP
  2990   0015B2                     
  2991                           ;main.c: 350:     PORTDbits.RD1 = 0;
  2992   0015B2  9283               	bcf	131,1,c	;volatile
  2993   0015B4  0012               	return		;funcret
  2994   0015B6  FFFF               	dw	65535	; errata NOP
  2995   0015B8                     __end_of_disableBuzzer:
  2996                           	callstack 0
  2997                           
  2998 ;; *************** function _LCD_Write_String *****************
  2999 ;; Defined at:
  3000 ;;		line 141 in file "libs/LCD.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;  str             2    6[COMRAM] PTR unsigned char 
  3003 ;;		 -> STR_15(6), STR_14(12), STR_13(14), STR_12(12), 
  3004 ;;		 -> STR_11(12), STR_10(10), STR_6(12), STR_5(17), 
  3005 ;;		 -> STR_4(12), STR_3(17), LCD_Write_Float@buf11(100), LCD_Write_Integer@buf(8), 
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;  i               2   10[COMRAM] int 
  3008 ;; Return value:  Size  Location     Type
  3009 ;;                  1    wreg      void 
  3010 ;; Registers used:
  3011 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3012 ;; Tracked objects:
  3013 ;;		On entry : 0/0
  3014 ;;		On exit  : 0/0
  3015 ;;		Unchanged: 0/0
  3016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3017 ;;      Params:         2       0       0       0       0       0       0
  3018 ;;      Locals:         2       0       0       0       0       0       0
  3019 ;;      Temps:          2       0       0       0       0       0       0
  3020 ;;      Totals:         6       0       0       0       0       0       0
  3021 ;;Total ram usage:        6 bytes
  3022 ;; Hardware stack levels used: 1
  3023 ;; Hardware stack levels required when called: 4
  3024 ;; This function calls:
  3025 ;;		_LCD_Write_Char
  3026 ;; This function is called by:
  3027 ;;		_main
  3028 ;;		_setState
  3029 ;;		_handleGate
  3030 ;;		_LCD_Write_Integer
  3031 ;;		_LCD_Write_Float
  3032 ;; This function uses a non-reentrant model
  3033 ;;
  3034                           
  3035                           	psect	text15
  3036   00111A                     __ptext15:
  3037                           	callstack 0
  3038   00111A                     _LCD_Write_String:
  3039                           	callstack 0
  3040   00111A  FFFF               	dw	65535	; assembler added errata NOP
  3041   00111C                     
  3042                           ;libs/LCD.c: 141: void LCD_Write_String(char *str);libs/LCD.c: 142: {;libs/LCD.c: 143:  
      +                             int i;;libs/LCD.c: 144:     for(i=0;str[i]!='\0';i++)
  3043   00111C  0E00               	movlw	0
  3044   00111E  6E0C               	movwf	(LCD_Write_String@i+1)^0,c
  3045   001120  0E00               	movlw	0
  3046   001122  6E0B               	movwf	LCD_Write_String@i^0,c
  3047   001124  EFB0  F008         	goto	l1664
  3048   001128                     l1660:
  3049   001128  FFFF               	dw	65535	; assembler added errata NOP
  3050                           
  3051                           ;libs/LCD.c: 145:        LCD_Write_Char(str[i]);
  3052   00112A  500B               	movf	LCD_Write_String@i^0,w,c
  3053   00112C  2407               	addwf	LCD_Write_String@str^0,w,c
  3054   00112E  6E09               	movwf	??_LCD_Write_String^0,c
  3055   001130  500C               	movf	(LCD_Write_String@i+1)^0,w,c
  3056   001132  2008               	addwfc	(LCD_Write_String@str+1)^0,w,c
  3057   001134  6E0A               	movwf	(??_LCD_Write_String+1)^0,c
  3058   001136  C009  FFF6         	movff	??_LCD_Write_String,tblptrl
  3059   00113A  C00A  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  3060   00113E  6AF8               	clrf	tblptru,c
  3061   001140  0E05               	movlw	(high __ramtop+-1)
  3062   001142  64F7               	cpfsgt	tblptrh,c
  3063   001144  D004               	bra	u757
  3064   001146  0008               	tblrd		*
  3065   001148  FFFF               	dw	65535	; errata NOP
  3066   00114A  50F5               	movf	tablat,w,c
  3067   00114C  D005               	bra	u750
  3068   00114E                     u757:
  3069   00114E  CFF6 FFE9          	movff	tblptrl,fsr0l
  3070   001152  CFF7 FFEA          	movff	tblptrh,fsr0h
  3071   001156  50EF               	movf	indf0,w,c
  3072   001158                     u750:
  3073   001158  EC08  F00A         	call	_LCD_Write_Char
  3074   00115C  4A0B               	infsnz	LCD_Write_String@i^0,f,c
  3075   00115E  2A0C               	incf	(LCD_Write_String@i+1)^0,f,c
  3076   001160                     l1664:
  3077   001160  FFFF               	dw	65535	; assembler added errata NOP
  3078   001162  500B               	movf	LCD_Write_String@i^0,w,c
  3079   001164  2407               	addwf	LCD_Write_String@str^0,w,c
  3080   001166  6E09               	movwf	??_LCD_Write_String^0,c
  3081   001168  500C               	movf	(LCD_Write_String@i+1)^0,w,c
  3082   00116A  2008               	addwfc	(LCD_Write_String@str+1)^0,w,c
  3083   00116C  6E0A               	movwf	(??_LCD_Write_String+1)^0,c
  3084   00116E  C009  FFF6         	movff	??_LCD_Write_String,tblptrl
  3085   001172  C00A  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  3086   001176  6AF8               	clrf	tblptru,c
  3087   001178  0E05               	movlw	(high __ramtop+-1)
  3088   00117A  64F7               	cpfsgt	tblptrh,c
  3089   00117C  D004               	bra	u767
  3090   00117E  0008               	tblrd		*
  3091   001180  FFFF               	dw	65535	; errata NOP
  3092   001182  50F5               	movf	tablat,w,c
  3093   001184  D005               	bra	u760
  3094   001186                     u767:
  3095   001186  CFF6 FFE9          	movff	tblptrl,fsr0l
  3096   00118A  CFF7 FFEA          	movff	tblptrh,fsr0h
  3097   00118E  50EF               	movf	indf0,w,c
  3098   001190                     u760:
  3099   001190  0900               	iorlw	0
  3100   001192  A4D8               	btfss	status,2,c
  3101   001194  EFCE  F008         	goto	u771
  3102   001198  EFD1  F008         	goto	u770
  3103   00119C                     u771:
  3104   00119C  FFFF               	dw	65535	; assembler added errata NOP
  3105   00119E  EF94  F008         	goto	l1660
  3106   0011A2                     u770:
  3107   0011A2  FFFF               	dw	65535	; assembler added errata NOP
  3108   0011A4  0012               	return		;funcret
  3109   0011A6  FFFF               	dw	65535	; errata NOP
  3110   0011A8                     __end_of_LCD_Write_String:
  3111                           	callstack 0
  3112                           
  3113 ;; *************** function _LCD_Write_Char *****************
  3114 ;; Defined at:
  3115 ;;		line 121 in file "libs/LCD.c"
  3116 ;; Parameters:    Size  Location     Type
  3117 ;;  Data            1    wreg     unsigned char 
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;  Data            1    5[COMRAM] unsigned char 
  3120 ;;  High4           1    4[COMRAM] unsigned char 
  3121 ;;  Low4            1    3[COMRAM] unsigned char 
  3122 ;; Return value:  Size  Location     Type
  3123 ;;                  1    wreg      void 
  3124 ;; Registers used:
  3125 ;;		wreg, status,2, status,0, cstack
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3131 ;;      Params:         0       0       0       0       0       0       0
  3132 ;;      Locals:         3       0       0       0       0       0       0
  3133 ;;      Temps:          0       0       0       0       0       0       0
  3134 ;;      Totals:         3       0       0       0       0       0       0
  3135 ;;Total ram usage:        3 bytes
  3136 ;; Hardware stack levels used: 1
  3137 ;; Hardware stack levels required when called: 3
  3138 ;; This function calls:
  3139 ;;		_LCD_DATA
  3140 ;; This function is called by:
  3141 ;;		_LCD_Write_String
  3142 ;;		_main
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           	psect	text16
  3147   001410                     __ptext16:
  3148                           	callstack 0
  3149   001410                     _LCD_Write_Char:
  3150                           	callstack 0
  3151   001410  FFFF               	dw	65535	; assembler added errata NOP
  3152                           
  3153                           ;incstack = 0
  3154                           ;LCD_Write_Char@Data stored from wreg
  3155   001412  6E06               	movwf	LCD_Write_Char@Data^0,c
  3156   001414                     
  3157                           ;libs/LCD.c: 121: void LCD_Write_Char(char Data);libs/LCD.c: 122: {;libs/LCD.c: 123:    
      +                          char Low4,High4;;libs/LCD.c: 124:    Low4 = Data & 0x0F;
  3158   001414  5006               	movf	LCD_Write_Char@Data^0,w,c
  3159   001416  0B0F               	andlw	15
  3160   001418  6E04               	movwf	LCD_Write_Char@Low4^0,c
  3161                           
  3162                           ;libs/LCD.c: 125:    High4 = Data & 0xF0;
  3163   00141A  5006               	movf	LCD_Write_Char@Data^0,w,c
  3164   00141C  0BF0               	andlw	240
  3165   00141E  6E05               	movwf	LCD_Write_Char@High4^0,c
  3166   001420                     
  3167                           ;libs/LCD.c: 126:    RD4 = 1;
  3168   001420  8883               	bsf	3971,4,c	;volatile
  3169   001422                     
  3170                           ;libs/LCD.c: 127:    LCD_DATA(High4>>4);
  3171   001422  3805               	swapf	LCD_Write_Char@High4^0,w,c
  3172   001424  0B0F               	andlw	15
  3173   001426  EC14  F009         	call	_LCD_DATA
  3174   00142A                     
  3175                           ;libs/LCD.c: 128:    RC6 = 1;
  3176   00142A  8C82               	bsf	3970,6,c	;volatile
  3177   00142C                     
  3178                           ;libs/LCD.c: 129:    _delay((unsigned long)((500)*(4000000/4000000.0)));
  3179   00142C  0E7D               	movlw	125
  3180   00142E                     u1367:
  3181   00142E  FFFF               	dw	65535	; errata NOP
  3182   001430  2EE8               	decfsz	wreg,f,c
  3183   001432  D7FD               	bra	u1367
  3184   001434                     
  3185                           ;libs/LCD.c: 130:    RC6 = 0;
  3186   001434  9C82               	bcf	3970,6,c	;volatile
  3187   001436                     
  3188                           ;libs/LCD.c: 131:    _delay((unsigned long)((500)*(4000000/4000000.0)));
  3189   001436  0E7D               	movlw	125
  3190   001438                     u1377:
  3191   001438  FFFF               	dw	65535	; errata NOP
  3192   00143A  2EE8               	decfsz	wreg,f,c
  3193   00143C  D7FD               	bra	u1377
  3194   00143E                     
  3195                           ;libs/LCD.c: 132:    LCD_DATA(Low4);
  3196   00143E  5004               	movf	LCD_Write_Char@Low4^0,w,c
  3197   001440  EC14  F009         	call	_LCD_DATA
  3198   001444                     
  3199                           ;libs/LCD.c: 133:    RC6 = 1;
  3200   001444  8C82               	bsf	3970,6,c	;volatile
  3201   001446                     
  3202                           ;libs/LCD.c: 134:    _delay((unsigned long)((500)*(4000000/4000000.0)));
  3203   001446  0E7D               	movlw	125
  3204   001448                     u1387:
  3205   001448  FFFF               	dw	65535	; errata NOP
  3206   00144A  2EE8               	decfsz	wreg,f,c
  3207   00144C  D7FD               	bra	u1387
  3208   00144E                     
  3209                           ;libs/LCD.c: 135:    RC6 = 0;
  3210   00144E  9C82               	bcf	3970,6,c	;volatile
  3211   001450                     
  3212                           ;libs/LCD.c: 136:    _delay((unsigned long)((500)*(4000000/4000000.0)));
  3213   001450  0E7D               	movlw	125
  3214   001452                     u1397:
  3215   001452  FFFF               	dw	65535	; errata NOP
  3216   001454  2EE8               	decfsz	wreg,f,c
  3217   001456  D7FD               	bra	u1397
  3218   001458  0012               	return		;funcret
  3219   00145A  FFFF               	dw	65535	; errata NOP
  3220   00145C                     __end_of_LCD_Write_Char:
  3221                           	callstack 0
  3222                           
  3223 ;; *************** function _LCD_Set_Cursor *****************
  3224 ;; Defined at:
  3225 ;;		line 71 in file "libs/LCD.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;  r               1    wreg     unsigned char 
  3228 ;;  c               1    4[COMRAM] unsigned char 
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;  r               1    5[COMRAM] unsigned char 
  3231 ;;  Temp            1    8[COMRAM] unsigned char 
  3232 ;;  High4           1    7[COMRAM] unsigned char 
  3233 ;;  Low4            1    6[COMRAM] unsigned char 
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  1    wreg      void 
  3236 ;; Registers used:
  3237 ;;		wreg, status,2, status,0, cstack
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3243 ;;      Params:         1       0       0       0       0       0       0
  3244 ;;      Locals:         4       0       0       0       0       0       0
  3245 ;;      Temps:          0       0       0       0       0       0       0
  3246 ;;      Totals:         5       0       0       0       0       0       0
  3247 ;;Total ram usage:        5 bytes
  3248 ;; Hardware stack levels used: 1
  3249 ;; Hardware stack levels required when called: 4
  3250 ;; This function calls:
  3251 ;;		_LCD_CMD
  3252 ;; This function is called by:
  3253 ;;		_main
  3254 ;;		_setState
  3255 ;;		_handleGate
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           	psect	text17
  3260   0012A8                     __ptext17:
  3261                           	callstack 0
  3262   0012A8                     _LCD_Set_Cursor:
  3263                           	callstack 0
  3264   0012A8  FFFF               	dw	65535	; assembler added errata NOP
  3265                           
  3266                           ;incstack = 0
  3267                           ;LCD_Set_Cursor@r stored from wreg
  3268   0012AA  6E06               	movwf	LCD_Set_Cursor@r^0,c
  3269   0012AC                     
  3270                           ;libs/LCD.c: 71: void LCD_Set_Cursor(unsigned char r, unsigned char c);libs/LCD.c: 72: {
      +                          ;libs/LCD.c: 73:     unsigned char Temp,Low4,High4;;libs/LCD.c: 74:     if(r == 1)
  3271   0012AC  0406               	decf	LCD_Set_Cursor@r^0,w,c
  3272   0012AE  A4D8               	btfss	status,2,c
  3273   0012B0  EF5C  F009         	goto	u731
  3274   0012B4  EF5F  F009         	goto	u730
  3275   0012B8                     u731:
  3276   0012B8  FFFF               	dw	65535	; assembler added errata NOP
  3277   0012BA  EF6F  F009         	goto	l54
  3278   0012BE                     u730:
  3279   0012BE  FFFF               	dw	65535	; assembler added errata NOP
  3280   0012C0                     
  3281                           ;libs/LCD.c: 75:     {;libs/LCD.c: 76:       Temp = 0x80 + c - 1;
  3282   0012C0  5005               	movf	LCD_Set_Cursor@c^0,w,c
  3283   0012C2  0F7F               	addlw	127
  3284   0012C4  6E09               	movwf	LCD_Set_Cursor@Temp^0,c
  3285                           
  3286                           ;libs/LCD.c: 77:       High4 = Temp >> 4;
  3287   0012C6  3809               	swapf	LCD_Set_Cursor@Temp^0,w,c
  3288   0012C8  0B0F               	andlw	15
  3289   0012CA  6E08               	movwf	LCD_Set_Cursor@High4^0,c
  3290                           
  3291                           ;libs/LCD.c: 78:       Low4 = Temp & 0x0F;
  3292   0012CC  5009               	movf	LCD_Set_Cursor@Temp^0,w,c
  3293   0012CE  0B0F               	andlw	15
  3294   0012D0  6E07               	movwf	LCD_Set_Cursor@Low4^0,c
  3295   0012D2                     
  3296                           ;libs/LCD.c: 79:       LCD_CMD(High4);
  3297   0012D2  5008               	movf	LCD_Set_Cursor@High4^0,w,c
  3298   0012D4  ECA0  F00A         	call	_LCD_CMD
  3299   0012D8                     
  3300                           ;libs/LCD.c: 80:       LCD_CMD(Low4);
  3301   0012D8  5007               	movf	LCD_Set_Cursor@Low4^0,w,c
  3302   0012DA  ECA0  F00A         	call	_LCD_CMD
  3303   0012DE                     l54:
  3304   0012DE  FFFF               	dw	65535	; assembler added errata NOP
  3305                           
  3306                           ;libs/LCD.c: 82:     if(r == 2)
  3307   0012E0  0E02               	movlw	2
  3308   0012E2  1806               	xorwf	LCD_Set_Cursor@r^0,w,c
  3309   0012E4  A4D8               	btfss	status,2,c
  3310   0012E6  EF77  F009         	goto	u741
  3311   0012EA  EF7A  F009         	goto	u740
  3312   0012EE                     u741:
  3313   0012EE  FFFF               	dw	65535	; assembler added errata NOP
  3314   0012F0  EF8A  F009         	goto	l56
  3315   0012F4                     u740:
  3316   0012F4  FFFF               	dw	65535	; assembler added errata NOP
  3317   0012F6                     
  3318                           ;libs/LCD.c: 83:     {;libs/LCD.c: 84:       Temp = 0xC0 + c - 1;
  3319   0012F6  5005               	movf	LCD_Set_Cursor@c^0,w,c
  3320   0012F8  0FBF               	addlw	191
  3321   0012FA  6E09               	movwf	LCD_Set_Cursor@Temp^0,c
  3322                           
  3323                           ;libs/LCD.c: 85:       High4 = Temp >> 4;
  3324   0012FC  3809               	swapf	LCD_Set_Cursor@Temp^0,w,c
  3325   0012FE  0B0F               	andlw	15
  3326   001300  6E08               	movwf	LCD_Set_Cursor@High4^0,c
  3327                           
  3328                           ;libs/LCD.c: 86:       Low4 = Temp & 0x0F;
  3329   001302  5009               	movf	LCD_Set_Cursor@Temp^0,w,c
  3330   001304  0B0F               	andlw	15
  3331   001306  6E07               	movwf	LCD_Set_Cursor@Low4^0,c
  3332   001308                     
  3333                           ;libs/LCD.c: 87:       LCD_CMD(High4);
  3334   001308  5008               	movf	LCD_Set_Cursor@High4^0,w,c
  3335   00130A  ECA0  F00A         	call	_LCD_CMD
  3336   00130E                     
  3337                           ;libs/LCD.c: 88:       LCD_CMD(Low4);
  3338   00130E  5007               	movf	LCD_Set_Cursor@Low4^0,w,c
  3339   001310  ECA0  F00A         	call	_LCD_CMD
  3340   001314                     l56:
  3341   001314  FFFF               	dw	65535	; assembler added errata NOP
  3342   001316  0012               	return		;funcret
  3343   001318  FFFF               	dw	65535	; errata NOP
  3344   00131A                     __end_of_LCD_Set_Cursor:
  3345                           	callstack 0
  3346                           
  3347 ;; *************** function _LCD_Clear *****************
  3348 ;; Defined at:
  3349 ;;		line 62 in file "libs/LCD.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;		None
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;		None
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  1    wreg      void 
  3356 ;; Registers used:
  3357 ;;		wreg, status,2, cstack
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3363 ;;      Params:         0       0       0       0       0       0       0
  3364 ;;      Locals:         0       0       0       0       0       0       0
  3365 ;;      Temps:          1       0       0       0       0       0       0
  3366 ;;      Totals:         1       0       0       0       0       0       0
  3367 ;;Total ram usage:        1 bytes
  3368 ;; Hardware stack levels used: 1
  3369 ;; Hardware stack levels required when called: 4
  3370 ;; This function calls:
  3371 ;;		_LCD_CMD
  3372 ;; This function is called by:
  3373 ;;		_main
  3374 ;;		_setState
  3375 ;;		_handleGate
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           	psect	text18
  3380   00151E                     __ptext18:
  3381                           	callstack 0
  3382   00151E                     _LCD_Clear:
  3383                           	callstack 0
  3384   00151E  FFFF               	dw	65535	; assembler added errata NOP
  3385   001520                     
  3386                           ;libs/LCD.c: 64:     LCD_CMD(0);
  3387   001520  0E00               	movlw	0
  3388   001522  ECA0  F00A         	call	_LCD_CMD
  3389                           
  3390                           ;libs/LCD.c: 65:     LCD_CMD(1);
  3391   001526  0E01               	movlw	1
  3392   001528  ECA0  F00A         	call	_LCD_CMD
  3393   00152C                     
  3394                           ;libs/LCD.c: 66:     _delay((unsigned long)((50)*(4000000/4000.0)));
  3395   00152C  0E31               	movlw	49
  3396   00152E  6E05               	movwf	??_LCD_Clear^0,c
  3397   001530  0EBB               	movlw	187
  3398   001532                     u1407:
  3399   001532  FFFF               	dw	65535	; errata NOP
  3400   001534  2EE8               	decfsz	wreg,f,c
  3401   001536  D7FD               	bra	u1407
  3402   001538  2E05               	decfsz	??_LCD_Clear^0,f,c
  3403   00153A  D7FB               	bra	u1407
  3404   00153C  0012               	return		;funcret
  3405   00153E  FFFF               	dw	65535	; errata NOP
  3406   001540                     __end_of_LCD_Clear:
  3407                           	callstack 0
  3408                           
  3409 ;; *************** function _LCD_Init *****************
  3410 ;; Defined at:
  3411 ;;		line 95 in file "libs/LCD.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;		None
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;		None
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  1    wreg      void 
  3418 ;; Registers used:
  3419 ;;		wreg, status,2, cstack
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3425 ;;      Params:         0       0       0       0       0       0       0
  3426 ;;      Locals:         0       0       0       0       0       0       0
  3427 ;;      Temps:          1       0       0       0       0       0       0
  3428 ;;      Totals:         1       0       0       0       0       0       0
  3429 ;;Total ram usage:        1 bytes
  3430 ;; Hardware stack levels used: 1
  3431 ;; Hardware stack levels required when called: 4
  3432 ;; This function calls:
  3433 ;;		_LCD_CMD
  3434 ;;		_LCD_DATA
  3435 ;; This function is called by:
  3436 ;;		_init
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           	psect	text19
  3441   0011A8                     __ptext19:
  3442                           	callstack 0
  3443   0011A8                     _LCD_Init:
  3444                           	callstack 0
  3445   0011A8  FFFF               	dw	65535	; assembler added errata NOP
  3446   0011AA                     
  3447                           ;libs/LCD.c: 98:   TRISD4 = 0;
  3448   0011AA  9895               	bcf	3989,4,c	;volatile
  3449                           
  3450                           ;libs/LCD.c: 99:   TRISC6 = 0;
  3451   0011AC  9C94               	bcf	3988,6,c	;volatile
  3452   0011AE                     
  3453                           ;libs/LCD.c: 102:   LCD_DATA(0x00);
  3454   0011AE  0E00               	movlw	0
  3455   0011B0  EC14  F009         	call	_LCD_DATA
  3456   0011B4                     
  3457                           ;libs/LCD.c: 103:   _delay((unsigned long)((30)*(4000000/4000.0)));
  3458   0011B4  0E1E               	movlw	30
  3459   0011B6  6E05               	movwf	??_LCD_Init^0,c
  3460   0011B8  0E3C               	movlw	60
  3461   0011BA                     u1417:
  3462   0011BA  FFFF               	dw	65535	; errata NOP
  3463   0011BC  2EE8               	decfsz	wreg,f,c
  3464   0011BE  D7FD               	bra	u1417
  3465   0011C0  2E05               	decfsz	??_LCD_Init^0,f,c
  3466   0011C2  D7FB               	bra	u1417
  3467   0011C4  D000               	nop2	
  3468   0011C6                     
  3469                           ;libs/LCD.c: 104:   _delay((unsigned long)((500)*(4000000/4000000.0)));
  3470   0011C6  0E7D               	movlw	125
  3471   0011C8                     u1427:
  3472   0011C8  FFFF               	dw	65535	; errata NOP
  3473   0011CA  2EE8               	decfsz	wreg,f,c
  3474   0011CC  D7FD               	bra	u1427
  3475   0011CE                     
  3476                           ;libs/LCD.c: 105:   LCD_CMD(0x03);
  3477   0011CE  0E03               	movlw	3
  3478   0011D0  ECA0  F00A         	call	_LCD_CMD
  3479   0011D4                     
  3480                           ;libs/LCD.c: 106:   _delay((unsigned long)((5)*(4000000/4000.0)));
  3481   0011D4  0E05               	movlw	5
  3482   0011D6  6E05               	movwf	??_LCD_Init^0,c
  3483   0011D8  0EDF               	movlw	223
  3484   0011DA                     u1437:
  3485   0011DA  FFFF               	dw	65535	; errata NOP
  3486   0011DC  2EE8               	decfsz	wreg,f,c
  3487   0011DE  D7FD               	bra	u1437
  3488   0011E0  2E05               	decfsz	??_LCD_Init^0,f,c
  3489   0011E2  D7FB               	bra	u1437
  3490   0011E4                     
  3491                           ;libs/LCD.c: 107:   LCD_CMD(0x03);
  3492   0011E4  0E03               	movlw	3
  3493   0011E6  ECA0  F00A         	call	_LCD_CMD
  3494   0011EA                     
  3495                           ;libs/LCD.c: 108:   _delay((unsigned long)((150)*(4000000/4000000.0)));
  3496   0011EA  0E25               	movlw	37
  3497   0011EC                     u1447:
  3498   0011EC  FFFF               	dw	65535	; errata NOP
  3499   0011EE  2EE8               	decfsz	wreg,f,c
  3500   0011F0  D7FD               	bra	u1447
  3501   0011F2  D000               	nop2	
  3502   0011F4                     
  3503                           ;libs/LCD.c: 109:   LCD_CMD(0x03);
  3504   0011F4  0E03               	movlw	3
  3505   0011F6  ECA0  F00A         	call	_LCD_CMD
  3506   0011FA                     
  3507                           ;libs/LCD.c: 110:   LCD_CMD(0x02);
  3508   0011FA  0E02               	movlw	2
  3509   0011FC  ECA0  F00A         	call	_LCD_CMD
  3510   001200                     
  3511                           ;libs/LCD.c: 111:   LCD_CMD(0x02);
  3512   001200  0E02               	movlw	2
  3513   001202  ECA0  F00A         	call	_LCD_CMD
  3514   001206                     
  3515                           ;libs/LCD.c: 112:   LCD_CMD(0x08);
  3516   001206  0E08               	movlw	8
  3517   001208  ECA0  F00A         	call	_LCD_CMD
  3518   00120C                     
  3519                           ;libs/LCD.c: 113:   LCD_CMD(0x00);
  3520   00120C  0E00               	movlw	0
  3521   00120E  ECA0  F00A         	call	_LCD_CMD
  3522   001212                     
  3523                           ;libs/LCD.c: 114:   LCD_CMD(0x0C);
  3524   001212  0E0C               	movlw	12
  3525   001214  ECA0  F00A         	call	_LCD_CMD
  3526   001218                     
  3527                           ;libs/LCD.c: 115:   LCD_CMD(0x00);
  3528   001218  0E00               	movlw	0
  3529   00121A  ECA0  F00A         	call	_LCD_CMD
  3530   00121E                     
  3531                           ;libs/LCD.c: 116:   LCD_CMD(0x06);
  3532   00121E  0E06               	movlw	6
  3533   001220  ECA0  F00A         	call	_LCD_CMD
  3534   001224  0012               	return		;funcret
  3535   001226  FFFF               	dw	65535	; errata NOP
  3536   001228                     __end_of_LCD_Init:
  3537                           	callstack 0
  3538                           
  3539 ;; *************** function _LCD_CMD *****************
  3540 ;; Defined at:
  3541 ;;		line 44 in file "libs/LCD.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;  CMD             1    wreg     unsigned char 
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;  CMD             1    3[COMRAM] unsigned char 
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  1    wreg      void 
  3548 ;; Registers used:
  3549 ;;		wreg, status,2, cstack
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3555 ;;      Params:         0       0       0       0       0       0       0
  3556 ;;      Locals:         1       0       0       0       0       0       0
  3557 ;;      Temps:          0       0       0       0       0       0       0
  3558 ;;      Totals:         1       0       0       0       0       0       0
  3559 ;;Total ram usage:        1 bytes
  3560 ;; Hardware stack levels used: 1
  3561 ;; Hardware stack levels required when called: 3
  3562 ;; This function calls:
  3563 ;;		_LCD_DATA
  3564 ;; This function is called by:
  3565 ;;		_LCD_Clear
  3566 ;;		_LCD_Set_Cursor
  3567 ;;		_LCD_Init
  3568 ;;		_LCD_Shift_Right
  3569 ;;		_LCD_Shift_Left
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text20
  3574   001540                     __ptext20:
  3575                           	callstack 0
  3576   001540                     _LCD_CMD:
  3577                           	callstack 0
  3578   001540  FFFF               	dw	65535	; assembler added errata NOP
  3579                           
  3580                           ;incstack = 0
  3581                           ;LCD_CMD@CMD stored from wreg
  3582   001542  6E04               	movwf	LCD_CMD@CMD^0,c
  3583   001544                     
  3584                           ;libs/LCD.c: 44: void LCD_CMD(unsigned char CMD);libs/LCD.c: 45: {;libs/LCD.c: 47:     R
      +                          D4 = 0;
  3585   001544  9883               	bcf	3971,4,c	;volatile
  3586                           
  3587                           ;libs/LCD.c: 48:     RC7 = 0;
  3588   001546  9E82               	bcf	3970,7,c	;volatile
  3589   001548                     
  3590                           ;libs/LCD.c: 51:     LCD_DATA(CMD);
  3591   001548  5004               	movf	LCD_CMD@CMD^0,w,c
  3592   00154A  EC14  F009         	call	_LCD_DATA
  3593   00154E                     
  3594                           ;libs/LCD.c: 54:     RC6 = 1;
  3595   00154E  8C82               	bsf	3970,6,c	;volatile
  3596   001550                     
  3597                           ;libs/LCD.c: 55:     _delay((unsigned long)((500)*(4000000/4000000.0)));
  3598   001550  0E7D               	movlw	125
  3599   001552                     u1457:
  3600   001552  FFFF               	dw	65535	; errata NOP
  3601   001554  2EE8               	decfsz	wreg,f,c
  3602   001556  D7FD               	bra	u1457
  3603   001558                     
  3604                           ;libs/LCD.c: 56:     RC6 = 0;
  3605   001558  9C82               	bcf	3970,6,c	;volatile
  3606   00155A  0012               	return		;funcret
  3607   00155C  FFFF               	dw	65535	; errata NOP
  3608   00155E                     __end_of_LCD_CMD:
  3609                           	callstack 0
  3610                           
  3611 ;; *************** function _LCD_DATA *****************
  3612 ;; Defined at:
  3613 ;;		line 22 in file "libs/LCD.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;  Data            1    wreg     unsigned char 
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;  Data            1    2[COMRAM] unsigned char 
  3618 ;; Return value:  Size  Location     Type
  3619 ;;                  1    wreg      void 
  3620 ;; Registers used:
  3621 ;;		wreg
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3627 ;;      Params:         0       0       0       0       0       0       0
  3628 ;;      Locals:         1       0       0       0       0       0       0
  3629 ;;      Temps:          0       0       0       0       0       0       0
  3630 ;;      Totals:         1       0       0       0       0       0       0
  3631 ;;Total ram usage:        1 bytes
  3632 ;; Hardware stack levels used: 1
  3633 ;; Hardware stack levels required when called: 2
  3634 ;; This function calls:
  3635 ;;		Nothing
  3636 ;; This function is called by:
  3637 ;;		_LCD_CMD
  3638 ;;		_LCD_Init
  3639 ;;		_LCD_Write_Char
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           	psect	text21
  3644   001228                     __ptext21:
  3645                           	callstack 0
  3646   001228                     _LCD_DATA:
  3647                           	callstack 0
  3648   001228  FFFF               	dw	65535	; assembler added errata NOP
  3649                           
  3650                           ;incstack = 0
  3651                           ;LCD_DATA@Data stored from wreg
  3652   00122A  6E03               	movwf	LCD_DATA@Data^0,c
  3653   00122C                     
  3654                           ;libs/LCD.c: 22: void LCD_DATA(unsigned char Data);libs/LCD.c: 23: {;libs/LCD.c: 24:    
      +                           if(Data & 1)
  3655   00122C  A003               	btfss	LCD_DATA@Data^0,0,c
  3656   00122E  EF1B  F009         	goto	u11
  3657   001232  EF1E  F009         	goto	u10
  3658   001236                     u11:
  3659   001236  FFFF               	dw	65535	; assembler added errata NOP
  3660   001238  EF22  F009         	goto	l37
  3661   00123C                     u10:
  3662   00123C  FFFF               	dw	65535	; assembler added errata NOP
  3663   00123E                     
  3664                           ;libs/LCD.c: 25:         RC5 = 1;
  3665   00123E  8A82               	bsf	3970,5,c	;volatile
  3666   001240  EF24  F009         	goto	l1016
  3667   001244                     l37:
  3668   001244  FFFF               	dw	65535	; assembler added errata NOP
  3669                           
  3670                           ;libs/LCD.c: 27:         RC5 = 0;
  3671   001246  9A82               	bcf	3970,5,c	;volatile
  3672   001248                     l1016:
  3673   001248  FFFF               	dw	65535	; assembler added errata NOP
  3674                           
  3675                           ;libs/LCD.c: 28:     if(Data & 2)
  3676   00124A  A203               	btfss	LCD_DATA@Data^0,1,c
  3677   00124C  EF2A  F009         	goto	u21
  3678   001250  EF2D  F009         	goto	u20
  3679   001254                     u21:
  3680   001254  FFFF               	dw	65535	; assembler added errata NOP
  3681   001256  EF31  F009         	goto	l39
  3682   00125A                     u20:
  3683   00125A  FFFF               	dw	65535	; assembler added errata NOP
  3684   00125C                     
  3685                           ;libs/LCD.c: 29:         RC4 = 1;
  3686   00125C  8882               	bsf	3970,4,c	;volatile
  3687   00125E  EF33  F009         	goto	l1020
  3688   001262                     l39:
  3689   001262  FFFF               	dw	65535	; assembler added errata NOP
  3690                           
  3691                           ;libs/LCD.c: 31:         RC4 = 0;
  3692   001264  9882               	bcf	3970,4,c	;volatile
  3693   001266                     l1020:
  3694   001266  FFFF               	dw	65535	; assembler added errata NOP
  3695                           
  3696                           ;libs/LCD.c: 32:     if(Data & 4)
  3697   001268  A403               	btfss	LCD_DATA@Data^0,2,c
  3698   00126A  EF39  F009         	goto	u31
  3699   00126E  EF3C  F009         	goto	u30
  3700   001272                     u31:
  3701   001272  FFFF               	dw	65535	; assembler added errata NOP
  3702   001274  EF40  F009         	goto	l41
  3703   001278                     u30:
  3704   001278  FFFF               	dw	65535	; assembler added errata NOP
  3705   00127A                     
  3706                           ;libs/LCD.c: 33:         RD3 = 1;
  3707   00127A  8683               	bsf	3971,3,c	;volatile
  3708   00127C  EF42  F009         	goto	l1024
  3709   001280                     l41:
  3710   001280  FFFF               	dw	65535	; assembler added errata NOP
  3711                           
  3712                           ;libs/LCD.c: 35:         RD3 = 0;
  3713   001282  9683               	bcf	3971,3,c	;volatile
  3714   001284                     l1024:
  3715   001284  FFFF               	dw	65535	; assembler added errata NOP
  3716                           
  3717                           ;libs/LCD.c: 36:     if(Data & 8)
  3718   001286  A603               	btfss	LCD_DATA@Data^0,3,c
  3719   001288  EF48  F009         	goto	u41
  3720   00128C  EF4B  F009         	goto	u40
  3721   001290                     u41:
  3722   001290  FFFF               	dw	65535	; assembler added errata NOP
  3723   001292  EF4F  F009         	goto	l43
  3724   001296                     u40:
  3725   001296  FFFF               	dw	65535	; assembler added errata NOP
  3726   001298                     
  3727                           ;libs/LCD.c: 37:         RD2 = 1;
  3728   001298  8483               	bsf	3971,2,c	;volatile
  3729   00129A  EF51  F009         	goto	l45
  3730   00129E                     l43:
  3731   00129E  FFFF               	dw	65535	; assembler added errata NOP
  3732                           
  3733                           ;libs/LCD.c: 39:         RD2 = 0;
  3734   0012A0  9483               	bcf	3971,2,c	;volatile
  3735   0012A2                     l45:
  3736   0012A2  FFFF               	dw	65535	; assembler added errata NOP
  3737   0012A4  0012               	return		;funcret
  3738   0012A6  FFFF               	dw	65535	; errata NOP
  3739   0012A8                     __end_of_LCD_DATA:
  3740                           	callstack 0
  3741                           
  3742 ;; *************** function _isr *****************
  3743 ;; Defined at:
  3744 ;;		line 468 in file "main.c"
  3745 ;; Parameters:    Size  Location     Type
  3746 ;;		None
  3747 ;; Auto vars:     Size  Location     Type
  3748 ;;		None
  3749 ;; Return value:  Size  Location     Type
  3750 ;;                  1    wreg      void 
  3751 ;; Registers used:
  3752 ;;		wreg, status,2, status,0, cstack
  3753 ;; Tracked objects:
  3754 ;;		On entry : 0/0
  3755 ;;		On exit  : 0/0
  3756 ;;		Unchanged: 0/0
  3757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3758 ;;      Params:         0       0       0       0       0       0       0
  3759 ;;      Locals:         0       0       0       0       0       0       0
  3760 ;;      Temps:          0       0       0       0       0       0       0
  3761 ;;      Totals:         0       0       0       0       0       0       0
  3762 ;;Total ram usage:        0 bytes
  3763 ;; Hardware stack levels used: 1
  3764 ;; Hardware stack levels required when called: 1
  3765 ;; This function calls:
  3766 ;;		i2_toggleBuzzer
  3767 ;; This function is called by:
  3768 ;;		Interrupt level 2
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           	psect	intcode
  3773   000008                     __pintcode:
  3774                           	callstack 0
  3775   000008                     _isr:
  3776                           	callstack 0
  3777   000008  FFFF               	dw	65535	; assembler added errata NOP
  3778                           
  3779                           ;incstack = 0
  3780   00000A  8236               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3781   00000C                     
  3782                           ;main.c: 469:     INTCONbits.GIE = 0;
  3783   00000C  9EF2               	bcf	242,7,c	;volatile
  3784                           
  3785                           ;main.c: 470:     INTCONbits.TMR0IF = 0;
  3786   00000E  94F2               	bcf	242,2,c	;volatile
  3787   000010                     
  3788                           ;main.c: 471:     preciseTimer += 256;
  3789   000010  0E00               	movlw	0
  3790   000012  2630               	addwf	_preciseTimer^0,f,c
  3791   000014  0E01               	movlw	1
  3792   000016  2231               	addwfc	(_preciseTimer+1)^0,f,c
  3793   000018  0E00               	movlw	0
  3794   00001A  2232               	addwfc	(_preciseTimer+2)^0,f,c
  3795   00001C  0E00               	movlw	0
  3796   00001E  2233               	addwfc	(_preciseTimer+3)^0,f,c
  3797                           
  3798                           ;main.c: 472:     if(preciseTimer >= 1000000 && currentState != 4){
  3799   000020  5033               	movf	(_preciseTimer+3)^0,w,c
  3800   000022  E10E               	bnz	i2u121_40
  3801   000024  0E40               	movlw	64
  3802   000026  5C30               	subwf	_preciseTimer^0,w,c
  3803   000028  0E42               	movlw	66
  3804   00002A  5831               	subwfb	(_preciseTimer+1)^0,w,c
  3805   00002C  0E0F               	movlw	15
  3806   00002E  5832               	subwfb	(_preciseTimer+2)^0,w,c
  3807   000030  A0D8               	btfss	status,0,c
  3808   000032  EF1D  F000         	goto	i2u121_41
  3809   000036  EF20  F000         	goto	i2u121_40
  3810   00003A                     i2u121_41:
  3811   00003A  FFFF               	dw	65535	; assembler added errata NOP
  3812   00003C  EF37  F000         	goto	i2l2064
  3813   000040                     i2u121_40:
  3814   000040  FFFF               	dw	65535	; assembler added errata NOP
  3815   000042  0E04               	movlw	4
  3816   000044  1834               	xorwf	_currentState^0,w,c
  3817   000046  B4D8               	btfsc	status,2,c
  3818   000048  EF28  F000         	goto	i2u122_41
  3819   00004C  EF2B  F000         	goto	i2u122_40
  3820   000050                     i2u122_41:
  3821   000050  FFFF               	dw	65535	; assembler added errata NOP
  3822   000052  EF37  F000         	goto	i2l2064
  3823   000056                     i2u122_40:
  3824   000056  FFFF               	dw	65535	; assembler added errata NOP
  3825   000058                     
  3826                           ;main.c: 473:         preciseTimer -= 1000000;
  3827   000058  0E40               	movlw	64
  3828   00005A  5E30               	subwf	_preciseTimer^0,f,c
  3829   00005C  0E42               	movlw	66
  3830   00005E  5A31               	subwfb	(_preciseTimer+1)^0,f,c
  3831   000060  0E0F               	movlw	15
  3832   000062  5A32               	subwfb	(_preciseTimer+2)^0,f,c
  3833   000064  0E00               	movlw	0
  3834   000066  5A33               	subwfb	(_preciseTimer+3)^0,f,c
  3835   000068                     
  3836                           ;main.c: 474:         toggleBuzzer(0);
  3837   000068  0E00               	movlw	0
  3838   00006A  ECE1  F009         	call	i2_toggleBuzzer
  3839   00006E                     i2l2064:
  3840   00006E  FFFF               	dw	65535	; assembler added errata NOP
  3841                           
  3842                           ;main.c: 476:     if(preciseTimer >= 3000000 && currentState == 4){
  3843   000070  5033               	movf	(_preciseTimer+3)^0,w,c
  3844   000072  E10E               	bnz	i2u123_40
  3845   000074  0EC0               	movlw	192
  3846   000076  5C30               	subwf	_preciseTimer^0,w,c
  3847   000078  0EC6               	movlw	198
  3848   00007A  5831               	subwfb	(_preciseTimer+1)^0,w,c
  3849   00007C  0E2D               	movlw	45
  3850   00007E  5832               	subwfb	(_preciseTimer+2)^0,w,c
  3851   000080  A0D8               	btfss	status,0,c
  3852   000082  EF45  F000         	goto	i2u123_41
  3853   000086  EF48  F000         	goto	i2u123_40
  3854   00008A                     i2u123_41:
  3855   00008A  FFFF               	dw	65535	; assembler added errata NOP
  3856   00008C  EF5F  F000         	goto	i2l2072
  3857   000090                     i2u123_40:
  3858   000090  FFFF               	dw	65535	; assembler added errata NOP
  3859   000092  0E04               	movlw	4
  3860   000094  1834               	xorwf	_currentState^0,w,c
  3861   000096  A4D8               	btfss	status,2,c
  3862   000098  EF50  F000         	goto	i2u124_41
  3863   00009C  EF53  F000         	goto	i2u124_40
  3864   0000A0                     i2u124_41:
  3865   0000A0  FFFF               	dw	65535	; assembler added errata NOP
  3866   0000A2  EF5F  F000         	goto	i2l2072
  3867   0000A6                     i2u124_40:
  3868   0000A6  FFFF               	dw	65535	; assembler added errata NOP
  3869   0000A8                     
  3870                           ;main.c: 477:         preciseTimer -= 3000000;
  3871   0000A8  0EC0               	movlw	192
  3872   0000AA  5E30               	subwf	_preciseTimer^0,f,c
  3873   0000AC  0EC6               	movlw	198
  3874   0000AE  5A31               	subwfb	(_preciseTimer+1)^0,f,c
  3875   0000B0  0E2D               	movlw	45
  3876   0000B2  5A32               	subwfb	(_preciseTimer+2)^0,f,c
  3877   0000B4  0E00               	movlw	0
  3878   0000B6  5A33               	subwfb	(_preciseTimer+3)^0,f,c
  3879   0000B8                     
  3880                           ;main.c: 478:         toggleBuzzer(1);
  3881   0000B8  0E01               	movlw	1
  3882   0000BA  ECE1  F009         	call	i2_toggleBuzzer
  3883   0000BE                     i2l2072:
  3884   0000BE  FFFF               	dw	65535	; assembler added errata NOP
  3885                           
  3886                           ;main.c: 480:     INTCONbits.GIE = 1;
  3887   0000C0  8EF2               	bsf	242,7,c	;volatile
  3888   0000C2  9236               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3889   0000C4  0011               	retfie		f
  3890   0000C6  FFFF               	dw	65535	; errata NOP
  3891   0000C8                     __end_of_isr:
  3892                           	callstack 0
  3893                           
  3894 ;; *************** function i2_toggleBuzzer *****************
  3895 ;; Defined at:
  3896 ;;		line 353 in file "main.c"
  3897 ;; Parameters:    Size  Location     Type
  3898 ;;  isEmergency     1    wreg     _Bool 
  3899 ;; Auto vars:     Size  Location     Type
  3900 ;;  isEmergency     1    1[COMRAM] _Bool 
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  1    wreg      void 
  3903 ;; Registers used:
  3904 ;;		wreg, status,2, status,0
  3905 ;; Tracked objects:
  3906 ;;		On entry : 0/0
  3907 ;;		On exit  : 0/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3910 ;;      Params:         0       0       0       0       0       0       0
  3911 ;;      Locals:         1       0       0       0       0       0       0
  3912 ;;      Temps:          1       0       0       0       0       0       0
  3913 ;;      Totals:         2       0       0       0       0       0       0
  3914 ;;Total ram usage:        2 bytes
  3915 ;; Hardware stack levels used: 1
  3916 ;; This function calls:
  3917 ;;		Nothing
  3918 ;; This function is called by:
  3919 ;;		_isr
  3920 ;; This function uses a non-reentrant model
  3921 ;;
  3922                           
  3923                           	psect	text23
  3924   0013C2                     __ptext23:
  3925                           	callstack 0
  3926   0013C2                     i2_toggleBuzzer:
  3927                           	callstack 0
  3928   0013C2  FFFF               	dw	65535	; assembler added errata NOP
  3929                           
  3930                           ;incstack = 0
  3931                           ;i2toggleBuzzer@isEmergency stored from wreg
  3932   0013C4  6E02               	movwf	i2toggleBuzzer@isEmergency^0,c
  3933   0013C6                     
  3934                           ;main.c: 354:     PORTDbits.RD1 =! PORTDbits.RD1;
  3935   0013C6  A283               	btfss	131,1,c	;volatile
  3936   0013C8  EFE8  F009         	goto	i2u92_41
  3937   0013CC  EFED  F009         	goto	i2u92_40
  3938   0013D0                     i2u92_41:
  3939   0013D0  FFFF               	dw	65535	; assembler added errata NOP
  3940   0013D2  6A01               	clrf	??i2_toggleBuzzer^0,c
  3941   0013D4  2A01               	incf	??i2_toggleBuzzer^0,f,c
  3942   0013D6  EFEF  F009         	goto	i2u93_48
  3943   0013DA                     i2u92_40:
  3944   0013DA  FFFF               	dw	65535	; assembler added errata NOP
  3945   0013DC  6A01               	clrf	??i2_toggleBuzzer^0,c
  3946   0013DE                     i2u93_48:
  3947   0013DE  FFFF               	dw	65535	; assembler added errata NOP
  3948   0013E0  4601               	rlncf	??i2_toggleBuzzer^0,f,c
  3949   0013E2  5083               	movf	131,w,c	;volatile
  3950   0013E4  1801               	xorwf	??i2_toggleBuzzer^0,w,c
  3951   0013E6  0BFD               	andlw	-3
  3952   0013E8  1801               	xorwf	??i2_toggleBuzzer^0,w,c
  3953   0013EA  6E83               	movwf	131,c	;volatile
  3954   0013EC                     
  3955                           ;main.c: 355:     if(isEmergency){
  3956   0013EC  5002               	movf	i2toggleBuzzer@isEmergency^0,w,c
  3957   0013EE  B4D8               	btfsc	status,2,c
  3958   0013F0  EFFC  F009         	goto	i2u94_41
  3959   0013F4  EFFF  F009         	goto	i2u94_40
  3960   0013F8                     i2u94_41:
  3961   0013F8  FFFF               	dw	65535	; assembler added errata NOP
  3962   0013FA  EF05  F00A         	goto	i2l269
  3963   0013FE                     i2u94_40:
  3964   0013FE  FFFF               	dw	65535	; assembler added errata NOP
  3965   001400                     
  3966                           ;main.c: 356:         PORTDbits.RD6 = PORTDbits.RD1;
  3967   001400  A283               	btfss	131,1,c	;volatile
  3968   001402  D002               	bra	i2u95_45
  3969   001404  8C83               	bsf	131,6,c	;volatile
  3970   001406  D001               	bra	i2u95_47
  3971   001408                     i2u95_45:
  3972   001408  9C83               	bcf	131,6,c	;volatile
  3973   00140A                     i2u95_47:
  3974   00140A                     i2l269:
  3975   00140A  FFFF               	dw	65535	; assembler added errata NOP
  3976   00140C  0012               	return		;funcret
  3977   00140E  FFFF               	dw	65535	; errata NOP
  3978   001410                     __end_ofi2_toggleBuzzer:
  3979                           	callstack 0
  3980                           
  3981                           	psect	text24
  3982   0015B8                     __ptext24:
  3983                           	callstack 0
  3984   0015B8  FFFF               	dw	65535	; assembler added errata NOP
  3985                           
  3986                           	psect	rparam
  3987   000000                     
  3988                           	psect	temp
  3989   000036                     btemp:
  3990                           	callstack 0
  3991   000036                     	ds	1
  3992   000000                     int$flags	set	btemp
  3993   000000                     wtemp8	set	btemp+1
  3994   000000                     ttemp5	set	btemp+1
  3995   000000                     ttemp6	set	btemp+4
  3996   000000                     ttemp7	set	btemp+8
  3997                           
  3998                           	psect	idloc
  3999                           
  4000                           ;Config register IDLOC0 @ 0x200000
  4001                           ;	unspecified, using default values
  4002   200000                     	org	2097152
  4003   200000  FF                 	db	255
  4004                           
  4005                           ;Config register IDLOC1 @ 0x200001
  4006                           ;	unspecified, using default values
  4007   200001                     	org	2097153
  4008   200001  FF                 	db	255
  4009                           
  4010                           ;Config register IDLOC2 @ 0x200002
  4011                           ;	unspecified, using default values
  4012   200002                     	org	2097154
  4013   200002  FF                 	db	255
  4014                           
  4015                           ;Config register IDLOC3 @ 0x200003
  4016                           ;	unspecified, using default values
  4017   200003                     	org	2097155
  4018   200003  FF                 	db	255
  4019                           
  4020                           ;Config register IDLOC4 @ 0x200004
  4021                           ;	unspecified, using default values
  4022   200004                     	org	2097156
  4023   200004  FF                 	db	255
  4024                           
  4025                           ;Config register IDLOC5 @ 0x200005
  4026                           ;	unspecified, using default values
  4027   200005                     	org	2097157
  4028   200005  FF                 	db	255
  4029                           
  4030                           ;Config register IDLOC6 @ 0x200006
  4031                           ;	unspecified, using default values
  4032   200006                     	org	2097158
  4033   200006  FF                 	db	255
  4034                           
  4035                           ;Config register IDLOC7 @ 0x200007
  4036                           ;	unspecified, using default values
  4037   200007                     	org	2097159
  4038   200007  FF                 	db	255
  4039                           
  4040                           	psect	config
  4041                           
  4042                           ; Padding undefined space
  4043   300000                     	org	3145728
  4044   300000  FF                 	db	255
  4045                           
  4046                           ;Config register CONFIG1H @ 0x300001
  4047                           ;	Oscillator Selection bits
  4048                           ;	OSC = HS, HS oscillator
  4049                           ;	Oscillator System Clock Switch Enable bit
  4050                           ;	OSCS = 0x1, unprogrammed default
  4051   300001                     	org	3145729
  4052   300001  22                 	db	34
  4053                           
  4054                           ;Config register CONFIG2L @ 0x300002
  4055                           ;	Power-up Timer Enable bit
  4056                           ;	PWRT = 0x1, unprogrammed default
  4057                           ;	Brown-out Reset Enable bit
  4058                           ;	BOR = OFF, Brown-out Reset disabled
  4059                           ;	Brown-out Reset Voltage bits
  4060                           ;	BORV = 0x3, unprogrammed default
  4061   300002                     	org	3145730
  4062   300002  0D                 	db	13
  4063                           
  4064                           ;Config register CONFIG2H @ 0x300003
  4065                           ;	Watchdog Timer Enable bit
  4066                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  4067                           ;	Watchdog Timer Postscale Select bits
  4068                           ;	WDTPS = 0x7, unprogrammed default
  4069   300003                     	org	3145731
  4070   300003  0E                 	db	14
  4071                           
  4072                           ; Padding undefined space
  4073   300004                     	org	3145732
  4074   300004  FF                 	db	255
  4075                           
  4076                           ;Config register CONFIG3H @ 0x300005
  4077                           ;	unspecified, using default values
  4078                           ;	CCP2 Mux bit
  4079                           ;	CCP2MUX = 0x1, unprogrammed default
  4080   300005                     	org	3145733
  4081   300005  01                 	db	1
  4082                           
  4083                           ;Config register CONFIG4L @ 0x300006
  4084                           ;	Stack Full/Underflow Reset Enable bit
  4085                           ;	STVR = 0x1, unprogrammed default
  4086                           ;	Low Voltage ICSP Enable bit
  4087                           ;	LVP = OFF, Low Voltage ICSP disabled
  4088                           ;	Background Debugger Enable bit
  4089                           ;	DEBUG = 0x1, unprogrammed default
  4090   300006                     	org	3145734
  4091   300006  81                 	db	129
  4092                           
  4093                           ; Padding undefined space
  4094   300007                     	org	3145735
  4095   300007  FF                 	db	255
  4096                           
  4097                           ;Config register CONFIG5L @ 0x300008
  4098                           ;	unspecified, using default values
  4099                           ;	Code Protection bit
  4100                           ;	CP0 = 0x1, unprogrammed default
  4101                           ;	Code Protection bit
  4102                           ;	CP1 = 0x1, unprogrammed default
  4103                           ;	Code Protection bit
  4104                           ;	CP2 = 0x1, unprogrammed default
  4105                           ;	Code Protection bit
  4106                           ;	CP3 = 0x1, unprogrammed default
  4107   300008                     	org	3145736
  4108   300008  0F                 	db	15
  4109                           
  4110                           ;Config register CONFIG5H @ 0x300009
  4111                           ;	unspecified, using default values
  4112                           ;	Boot Block Code Protection bit
  4113                           ;	CPB = 0x1, unprogrammed default
  4114                           ;	Data EEPROM Code Protection bit
  4115                           ;	CPD = 0x1, unprogrammed default
  4116   300009                     	org	3145737
  4117   300009  C0                 	db	192
  4118                           
  4119                           ;Config register CONFIG6L @ 0x30000A
  4120                           ;	unspecified, using default values
  4121                           ;	Write Protection bit
  4122                           ;	WRT0 = 0x1, unprogrammed default
  4123                           ;	Write Protection bit
  4124                           ;	WRT1 = 0x1, unprogrammed default
  4125                           ;	Write Protection bit
  4126                           ;	WRT2 = 0x1, unprogrammed default
  4127                           ;	Write Protection bit
  4128                           ;	WRT3 = 0x1, unprogrammed default
  4129   30000A                     	org	3145738
  4130   30000A  0F                 	db	15
  4131                           
  4132                           ;Config register CONFIG6H @ 0x30000B
  4133                           ;	unspecified, using default values
  4134                           ;	Configuration Register Write Protection bit
  4135                           ;	WRTC = 0x1, unprogrammed default
  4136                           ;	Boot Block Write Protection bit
  4137                           ;	WRTB = 0x1, unprogrammed default
  4138                           ;	Data EEPROM Write Protection bit
  4139                           ;	WRTD = 0x1, unprogrammed default
  4140   30000B                     	org	3145739
  4141   30000B  E0                 	db	224
  4142                           
  4143                           ;Config register CONFIG7L @ 0x30000C
  4144                           ;	unspecified, using default values
  4145                           ;	Table Read Protection bit
  4146                           ;	EBTR0 = 0x1, unprogrammed default
  4147                           ;	Table Read Protection bit
  4148                           ;	EBTR1 = 0x1, unprogrammed default
  4149                           ;	Table Read Protection bit
  4150                           ;	EBTR2 = 0x1, unprogrammed default
  4151                           ;	Table Read Protection bit
  4152                           ;	EBTR3 = 0x1, unprogrammed default
  4153   30000C                     	org	3145740
  4154   30000C  0F                 	db	15
  4155                           
  4156                           ;Config register CONFIG7H @ 0x30000D
  4157                           ;	unspecified, using default values
  4158                           ;	Boot Block Table Read Protection bit
  4159                           ;	EBTRB = 0x1, unprogrammed default
  4160   30000D                     	org	3145741
  4161   30000D  40                 	db	64
  4162                           tosu	equ	0xFFF
  4163                           tosh	equ	0xFFE
  4164                           tosl	equ	0xFFD
  4165                           stkptr	equ	0xFFC
  4166                           pclatu	equ	0xFFB
  4167                           pclath	equ	0xFFA
  4168                           pcl	equ	0xFF9
  4169                           tblptru	equ	0xFF8
  4170                           tblptrh	equ	0xFF7
  4171                           tblptrl	equ	0xFF6
  4172                           tablat	equ	0xFF5
  4173                           prodh	equ	0xFF4
  4174                           prodl	equ	0xFF3
  4175                           indf0	equ	0xFEF
  4176                           postinc0	equ	0xFEE
  4177                           postdec0	equ	0xFED
  4178                           preinc0	equ	0xFEC
  4179                           plusw0	equ	0xFEB
  4180                           fsr0h	equ	0xFEA
  4181                           fsr0l	equ	0xFE9
  4182                           wreg	equ	0xFE8
  4183                           indf1	equ	0xFE7
  4184                           postinc1	equ	0xFE6
  4185                           postdec1	equ	0xFE5
  4186                           preinc1	equ	0xFE4
  4187                           plusw1	equ	0xFE3
  4188                           fsr1h	equ	0xFE2
  4189                           fsr1l	equ	0xFE1
  4190                           bsr	equ	0xFE0
  4191                           indf2	equ	0xFDF
  4192                           postinc2	equ	0xFDE
  4193                           postdec2	equ	0xFDD
  4194                           preinc2	equ	0xFDC
  4195                           plusw2	equ	0xFDB
  4196                           fsr2h	equ	0xFDA
  4197                           fsr2l	equ	0xFD9
  4198                           status	equ	0xFD8

Data Sizes:
    Strings     91
    Constant    30
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     47      53
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    S956$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S956$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    readMatchCode@codeToMatch	PTR unsigned char  size(2) Largest target is 5
		 -> resetCode(CODE[5]), activationCode(CODE[5]), 

    readMatchCode@isEnabled	PTR PTR _Bool  size(2) Largest target is 2
		 -> main@isRstBtnPressedPtr(COMRAM[2]), main@isSysBtnPressedPtr(COMRAM[2]), 

    handleGate@callback	PTR FTN(int ,)void  size(2) Largest target is 1
		 -> pwmSet(), 

    handleGate@isOpen	PTR _Bool  size(2) Largest target is 1
		 -> gateState(COMRAM[1]), 

    main@isRstBtnPressedPtr	PTR _Bool  size(2) Largest target is 1
		 -> NULL(NULL[0]), main@isRstBtnPressed(COMRAM[1]), main@isSysBtnPressed(COMRAM[1]), 

    main@isSysBtnPressedPtr	PTR _Bool  size(2) Largest target is 1
		 -> NULL(NULL[0]), main@isRstBtnPressed(COMRAM[1]), main@isSysBtnPressed(COMRAM[1]), 

    LCD_Write_String@str	PTR unsigned char  size(2) Largest target is 100
		 -> STR_15(CODE[6]), STR_14(CODE[12]), STR_13(CODE[14]), STR_12(CODE[12]), 
		 -> STR_11(CODE[12]), STR_10(CODE[10]), STR_6(CODE[12]), STR_5(CODE[17]), 
		 -> STR_4(CODE[12]), STR_3(CODE[17]), LCD_Write_Float@buf11(COMRAM[100]), LCD_Write_Integer@buf(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_setState
    _readMatchCode->_keypadPolling
    _init->_setState
    _openGate->_handleGate
    _closeGate->_handleGate
    _handleGate->_LCD_Write_String
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_DATA
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Clear->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_CMD->_LCD_DATA

Critical Paths under _isr in COMRAM

    _isr->i2_toggleBuzzer

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   23211
                                             26 COMRAM    21    21      0
                          _LCD_Clear
                     _LCD_Set_Cursor
                     _LCD_Write_Char
                   _LCD_Write_String
                          _erPolling
                               _init
                         _pirPolling
                      _readMatchCode
                      _rstBtnPolling
                           _setState
                      _sysBtnPolling
 ---------------------------------------------------------------------------------
 (1) _sysBtnPolling                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rstBtnPolling                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readMatchCode                                        9     5      4     829
                                             12 COMRAM     9     5      4
                          _erPolling
                      _keypadPolling
 ---------------------------------------------------------------------------------
 (2) _keypadPolling                                       10    10      0     150
                                              2 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (2) _erPolling                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pirPolling                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    9900
                           _LCD_Init
                             _pwmSet
                           _setState
 ---------------------------------------------------------------------------------
 (1) _setState                                             4     2      2    9539
                                             22 COMRAM     4     2      2
                          _LCD_Clear
                     _LCD_Set_Cursor
                   _LCD_Write_String
                          _closeGate
                           _openGate
                       _toggleBuzzer
 ---------------------------------------------------------------------------------
 (2) _toggleBuzzer                                         2     2      0      15
                                              2 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _openGate                                             0     0      0    3144
                         _handleGate
 ---------------------------------------------------------------------------------
 (2) _closeGate                                            0     0      0    3144
                         _handleGate
 ---------------------------------------------------------------------------------
 (3) _handleGate                                          10     6      4    3144
                                             12 COMRAM    10     6      4
                          _LCD_Clear
                     _LCD_Set_Cursor
                   _LCD_Write_String
                      _disableBuzzer
                             _pwmSet *
 ---------------------------------------------------------------------------------
 (4) _pwmSet                                               4     2      2     226
                                              2 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _disableBuzzer                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _LCD_Write_String                                     6     4      2    1122
                                              6 COMRAM     6     4      2
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (5) _LCD_Write_Char                                       3     3      0     120
                                              3 COMRAM     3     3      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (4) _LCD_Set_Cursor                                       5     4      1    1105
                                              4 COMRAM     5     4      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (4) _LCD_Clear                                            1     1      0      75
                                              4 COMRAM     1     1      0
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             1     1      0     135
                                              4 COMRAM     1     1      0
                            _LCD_CMD
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (5) _LCD_CMD                                              1     1      0      75
                                              3 COMRAM     1     1      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (6) _LCD_DATA                                             1     1      0      60
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  0     0      0      22
                     i2_toggleBuzzer
 ---------------------------------------------------------------------------------
 (9) i2_toggleBuzzer                                       2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Clear
     _LCD_CMD
       _LCD_DATA
   _LCD_Set_Cursor
     _LCD_CMD
   _LCD_Write_Char
     _LCD_DATA
   _LCD_Write_String
     _LCD_Write_Char
   _erPolling
   _init
     _LCD_Init
       _LCD_CMD
       _LCD_DATA
     _pwmSet
     _setState
       _LCD_Clear
       _LCD_Set_Cursor
       _LCD_Write_String
       _closeGate
         _handleGate
           _LCD_Clear
           _LCD_Set_Cursor
           _LCD_Write_String
           _disableBuzzer
           _pwmSet *
       _openGate
         _handleGate
       _toggleBuzzer
   _pirPolling
   _readMatchCode
     _erPolling
     _keypadPolling
   _rstBtnPolling
   _setState
   _sysBtnPolling

 _isr (ROOT)
   i2_toggleBuzzer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0       0       4        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     2F      35       1       42.1%
BITBIGSFR_1lll      1D      0       0      23        0.0%
BITBIGSFR_1llh       E      0       0      22        0.0%
BITBIGSFRlh          E      0       0      25        0.0%
BITBIGSFR_5h         9      0       0      15        0.0%
BITBIGSFRhh          6      0       0      24        0.0%
BITBIGSFR_2          5      0       0      18        0.0%
BITBIGSFR_1hh        3      0       0      19        0.0%
BITBIGSFR_4          3      0       0      16        0.0%
BITBIGSFR_3          3      0       0      17        0.0%
BITBIGSFR_1hl        2      0       0      20        0.0%
BITBIGSFR_1lh        1      0       0      21        0.0%
BIGSFR_5             0      0       0     200        0.0%
BIGSFR_4             0      0       0     200        0.0%
BIGSFR_3             0      0       0     200        0.0%
BIGSFR_2             0      0       0     200        0.0%
BIGSFR_1             0      0       0     200        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      35      26        0.0%
DATA                 0      0      35      28        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri May 05 14:07:10 2023

                                                   l41 1280  
                                                   l43 129E  
                                                   l51 153C  
                                                   l45 12A2  
                                                   l37 1244  
                                                   l54 12DE  
                                                   l62 1458  
                                                   l39 1262  
                                                   l48 155A  
                                                   l56 1314  
                                                   l59 1224  
                                                   l68 11A4  
                                                   u10 123C  
                                                   u11 1236  
                                                   u20 125A  
                                                   u21 1254  
                                                   u30 1278  
                                                   u31 1272  
                                                   u40 1296  
                                                   u41 1290  
                                                  l310 14F4  
                                                  l303 0EF6  
                                                  l314 1518  
                                                  l322 14D0  
                                                  l246 148A  
                                                  l262 1576  
                                                  l318 14AC  
                                                  l256 1114  
                                                  l265 15B4  
                                                  l177 1370  
                                                  l259 1592  
                                                  l269 13BC  
                                                  l285 1020  
                                                  l278 0D76  
                                                  l279 0D88  
                                                  _RC4 007C14  
                                                  _RD2 007C1A  
                                                  _RD3 007C1B  
                                                  _RC5 007C15  
                                                  _RD4 007C1C  
                                                  _RC6 007C16  
                                                  _RC7 007C17  
                                                  u200 13B0  
                                                  u201 13AA  
                                                  u220 14E8  
                                                  u300 14A0  
                                                  u221 14E2  
                                                  u301 149A  
                                                  u230 0DC0  
                                                  u215 13BA  
                                                  u231 0DBA  
                                                  u217 13BC  
                                                  u180 138C  
                                                  u260 0E2A  
                                                  u244 0DE2  
                                                  u181 1382  
                                                  u261 0E24  
                                                  u245 0DDA  
                                                  u270 0E3E  
                                                  u254 0E0C  
                                                  _PR2 000FCB  
                                                  u271 0E38  
                                                  u255 0E06  
                                                  u280 0EB4  
                                                  u281 0EAE  
                                                  u370 150C  
                                                  u290 0EDE  
                                                  u371 1506  
                                                  u291 0ED8  
                                                  u380 14C4  
                                                  u381 14BE  
                                                  u198 1390  
                                                  u730 12BE  
                                                  u810 0CAE  
                                                  u731 12B8  
                                                  u811 0CA8  
                                                  u740 12F4  
                                                  u820 0CD4  
                                                  u900 0FD4  
                                                  u741 12EE  
                                                  u821 0CCE  
                                                  u901 0FCE  
                                                  u750 1158  
                                                  u830 0CF0  
                                                  u910 101C  
                                                  u831 0CEA  
                                                  u911 1016  
                                                  u760 1190  
                                                  u808 0C72  
                                                  u809 0C8A  
                                                  u770 11A2  
                                                  u850 0D74  
                                                  u771 119C  
                                                  u851 0D6E  
                                                  u780 0C2C  
                                                  u860 0F28  
                                                  u757 114E  
                                                  u781 0C26  
                                                  u861 0F22  
                                                  u790 0C48  
                                                  u870 0F6E  
                                                  u767 1186  
                                                  u791 0C42  
                                                  u871 0F68  
                                                  u848 0D36  
                                                  u880 0F8A  
                                                  u960 06B6  
                                                  u849 0D4E  
                                                  u881 0F84  
                                                  u961 06B0  
                                                  u890 0FB8  
                                                  u970 070E  
                                                  u891 0FB2  
                                                  u971 0708  
                                                  u980 0750  
                                                  u981 074A  
                                                  u990 077A  
                                                  u991 0774  
                                                  _isr 0008  
                                                  tosl 000FFD  
                                                  wreg 000FE8  
                                      __end_of_LCD_CMD 155E  
                                       _LCD_Set_Cursor 12A8  
                                                 l1020 1266  
                                                 l1012 122C  
                                                 l1022 127A  
                                                 l1014 123E  
                                                 l1030 1548  
                                                 l1024 1284  
                                                 l1016 1248  
                                                 l1032 154E  
                                                 l1040 1420  
                                                 l2000 0AC0  
                                                 l1026 1298  
                                                 l1018 125C  
                                                 l1034 1550  
                                                 l1050 1436  
                                                 l1042 1422  
                                                 l2010 0AEA  
                                                 l1036 1558  
                                                 l1028 1544  
                                                 l1060 1450  
                                                 l1052 143E  
                                                 l1044 142A  
                                                 l2020 0B3C  
                                                 l2012 0AF4  
                                                 l2004 0ACC  
                                                 l1062 1520  
                                                 l1054 1444  
                                                 l1046 142C  
                                                 l1038 1414  
                                                 l1150 13B2  
                                                 l1310 1490  
                                                 l2030 0B70  
                                                 l2022 0B4E  
                                                 l1160 11CE  
                                                 l1152 11AA  
                                                 l1064 152C  
                                                 l1056 1446  
                                                 l1048 1434  
                                                 l1312 14A2  
                                                 l2032 0B78  
                                                 l2016 0B1A  
                                                 l1170 11FA  
                                                 l1162 11D4  
                                                 l1154 11AE  
                                                 l1058 144E  
                                                 l1090 15B2  
                                                 l1146 1378  
                                                 l1250 14F0  
                                                 l2042 0BB6  
                                                 l2034 0B8E  
                                                 l2018 0B34  
                                                 l2026 0B5A  
                                                 l1180 1218  
                                                 l1172 1200  
                                                 l1164 11E4  
                                                 l1156 11B4  
                                                 l1148 139E  
                                                 l1244 14D8  
                                                 l1260 0DC6  
                                                 l1316 14A8  
                                                 l2036 0BA2  
                                                 l2028 0B6C  
                                                 l1182 121E  
                                                 l1174 1206  
                                                 l1166 11EA  
                                                 l1158 11C6  
                                                 l1246 14EA  
                                                 l1270 0E2C  
                                                 l1262 0DEE  
                                                 l1254 0D90  
                                                 l1176 120C  
                                                 l1168 11F4  
                                                 l1272 0E40  
                                                 l1280 0E90  
                                                 l1256 0DA0  
                                                 l2048 0BCC  
                                                 l1178 1212  
                                                 l1362 14FC  
                                                 l1290 0EC4  
                                                 l1282 0E96  
                                                 l1274 0E80  
                                                 l2082 0BE2  
                                                 l1700 0D0E  
                                                 l2084 10EC  
                                                 l1364 150E  
                                                 l1292 0EE0  
                                                 l1284 0EB6  
                                                 l1276 0E88  
                                                 l1268 0DF6  
                                                 l1372 14B4  
                                                 l1710 0D50  
                                                 l1294 0EE4  
                                                 l1374 14C6  
                                                 l1712 0D56  
                                                 l1720 1560  
                                                 l1368 1514  
                                                 l1296 0EF4  
                                                 l1288 0EBE  
                                                 l1800 0F3A  
                                                 l1650 12D8  
                                                 l1714 0D78  
                                                 l1706 0D16  
                                                 l1730 1046  
                                                 l1722 1028  
                                                 l1810 0F8C  
                                                 l1378 14CC  
                                                 l1652 12F6  
                                                 l1644 12AC  
                                                 l1660 1128  
                                                 l1716 0D7C  
                                                 l1708 0D28  
                                                 l1740 1066  
                                                 l1732 104C  
                                                 l1724 102C  
                                                 l1820 0FBE  
                                                 l1812 0F9C  
                                                 l1804 0F40  
                                                 l1900 07DA  
                                                 l1654 1308  
                                                 l1646 12C0  
                                                 l1662 115C  
                                                 l1670 0C2E  
                                                 l1718 157C  
                                                 l1750 1088  
                                                 l1742 106C  
                                                 l1734 104E  
                                                 l1726 1032  
                                                 l1830 101E  
                                                 l1806 0F70  
                                                 l1902 07EA  
                                                 l1656 130E  
                                                 l1648 12D2  
                                                 l1664 1160  
                                                 l1680 0C64  
                                                 l1672 0C4A  
                                                 l1752 108E  
                                                 l1744 1070  
                                                 l1736 1052  
                                                 l1728 1036  
                                                 l1824 0FDA  
                                                 l1808 0F74  
                                                 l1816 0FA2  
                                                 l1920 0860  
                                                 l1904 0800  
                                                 l1658 111C  
                                                 l1666 145E  
                                                 l1690 0CD6  
                                                 l1682 0C8C  
                                                 l1770 10BA  
                                                 l1762 10AA  
                                                 l1754 1094  
                                                 l1746 107C  
                                                 l1738 1056  
                                                 l1826 0FEC  
                                                 l1930 08C4  
                                                 l1922 0868  
                                                 l1914 0830  
                                                 l1906 0810  
                                                 l1850 0682  
                                                 l1692 0CF2  
                                                 l1684 0C90  
                                                 l1668 0C1A  
                                                 l1772 10C4  
                                                 l1764 10B0  
                                                 l1756 1096  
                                                 l1748 107E  
                                                 l1828 0FFE  
                                                 l1940 0904  
                                                 l1924 0886  
                                                 l1908 0826  
                                                 l1860 069E  
                                                 l1852 0688  
                                  LCD_Write_String@str 0007  
                                                 l1694 0CF6  
                                                 l1686 0CB0  
                                                 l1678 0C52  
                                                 l1766 10B2  
                                                 l1758 109A  
                                                 l1790 1366  
                                                 l1782 131C  
                                                 l1942 091E  
                                                 l1950 095E  
                                                 l1926 08A0  
                                                 l1918 084E  
                                                 l1870 06EA  
                                                 l1862 06B8  
                                                 l1854 0694  
                                                 l1696 0D00  
                                                 l1688 0CC0  
                                                 l1768 10B6  
                                                 l1776 10D4  
                                                 l1784 1340  
                                                 l1792 0EFE  
                                                 l1944 0926  
                                                 l1936 08CE  
                                                 l1928 08B2  
                                                 l1880 0732  
                                                 l1864 06C2  
                                                 l1872 06F6  
                                                 l1848 067C  
                                                 l1698 0D0C  
                                                 l1786 1356  
                                                 l1794 0F0A  
                                                 l1970 09E6  
                                                 l1962 09A6  
                                                 l1946 0938  
                                                 l1938 08E8  
                                                 l1890 0792  
                                                 l1882 0752  
                                                 l1874 0710  
                                                 l1866 06CE  
                                                 l1788 1362  
                                                 l1796 0F12  
                                                 l1964 09B8  
                                                 l1956 097C  
                                                 l1948 0940  
                                                 l1892 07A8  
                                                 l1884 0762  
                                                 l1876 0718  
                                                 l1868 06E6  
                                                 l1798 0F2A  
                                                 l1990 0A6E  
                                                 l1982 0A28  
                                                 l1966 09BC  
                                                 l1958 0996  
                                                 l1894 07B2  
                                                 l1886 0766  
                                                 l1878 072A  
                                                 l1984 0A3E  
                                                 l1976 0A00  
                                                 l1968 09D0  
                                                 l1896 07BE  
                                                 l1888 077C  
                                                 l1994 0A8C  
                                                 l1986 0A48  
                                                 l1978 0A16  
                                                 l1898 07D6  
                                                 l1996 0AA6  
                                                 l1998 0AAE  
                                                 ?_isr 0001  
                                                 STR_1 0672  
                                                 STR_2 0675  
                                                 STR_3 061F  
                                                 STR_4 0656  
                                                 STR_5 061F  
                                                 STR_6 0656  
                                                 STR_7 0678  
                                                 STR_8 0678  
                                                 STR_9 0678  
                                                 u1000 07A6  
                                                 u1001 07A0  
                                                 u1010 07FE  
                                                 u1011 07F8  
                                                 u1100 0994  
                                                 u1020 0848  
                                                 u1101 098E  
                                                 u1021 0842  
                                                 u1110 09CE  
                                                 u1030 0886  
                                                 u1111 09C8  
                                                 u1031 0880  
                                                 u1200 0BA0  
                                                 u1120 09FA  
                                                 u1040 089E  
                                                 u1201 0B9A  
                                                 u1121 09F4  
                                                 u1041 0898  
                                                 u1130 0A14  
                                                 u1050 08E6  
                                                 u1131 0A0E  
                                                 u1051 08E0  
                                                 u1140 0A68  
                                                 u1060 08FE  
                                                 u1141 0A62  
                                                 u1061 08F8  
                                                 u1150 0A86  
                                                 u1070 091C  
                                                 u1151 0A80  
                                                 u1071 0916  
                                                 u1160 0AA4  
                                                 u1080 095E  
                                                 u1161 0A9E  
                                                 u1081 0958  
                                                 u1170 0AE4  
                                                 u1090 0976  
                                                 u1171 0ADE  
                                                 u1307 0AB6  
                                                 u1091 0970  
                                                 u1180 0B14  
                                                 u1317 0B44  
                                                 u1181 0B0E  
                                                 u1190 0B32  
                                                 u1407 1532  
                                                 u1327 0FF4  
                                                 u1191 0B2C  
                                                 u1417 11BA  
                                                 u1337 0EEA  
                                                 u1257 06D8  
                                                 u1427 11C8  
                                                 u1347 0C5A  
                                                 u1267 0720  
                                                 u1437 11DA  
                                                 u1357 0D1E  
                                                 u1277 07C8  
                                                 u1447 11EC  
                                                 u1367 142E  
                                                 u1287 0856  
                                                 u1457 1552  
                                                 u1377 1438  
                                                 u1297 092E  
                                                 u1387 1448  
                                                 u1397 1452  
                                                 _RCON 000FD0  
                                    ?_LCD_Write_String 0007  
                                                 _main 067C  
                                                 _init 131A  
                                                 fsr0h 000FEA  
                                                 indf0 000FEF  
                                                 fsr2h 000FDA  
                                                 fsr0l 000FE9  
                                                 indf2 000FDF  
                                                 fsr2l 000FD9  
                                                 btemp 0036  
                                                 start 00C8  
                                   ??_LCD_Write_String 0009  
                                         ___param_bank 000000  
                                     __end_of_LCD_DATA 12A8  
                                                ??_isr 0003  
                                     __end_of_LCD_Init 1228  
                                      handleGate@i_473 0015  
                                                ?_main 0001  
                                                ?_init 0001  
                                                STR_10 0662  
                                                STR_11 064A  
                                                STR_12 063E  
                                                STR_13 0630  
                                                STR_14 0656  
                                                STR_15 066C  
                                                _T0CON 000FD5  
                                                _T1CON 000FCD  
                                                _T2CON 000FCA  
                                                i2l329 00C2  
                                                i2l269 140A  
                                                _PORTA 000F80  
                                                _PORTB 000F81  
                                                _PORTC 000F82  
                                                _PORTD 000F83  
                                                _TRISA 000F92  
                                                _TRISB 000F93  
                                                _TRISC 000F94  
                                                _TRISD 000F95  
                               __end_of_LCD_Set_Cursor 131A  
                                                main@i 0023  
                                     __end_of_PWM_OPEN 0613  
                                      ??_rstBtnPolling 0003  
                                                pclath 000FFA  
                                                tablat 000FF5  
                                                ttemp5 0037  
                                                ttemp6 003A  
                                                ttemp7 003E  
                                                status 000FD8  
                                                wtemp8 0037  
                                       _LCD_Write_Char 1410  
                                      __initialization 1596  
                                         __end_of_main 0C16  
                                         __end_of_init 1374  
                                       _activationCode 061A  
                               readMatchCode@isEnabled 000F  
                                               ??_main 001B  
                                               ??_init 001B  
                                    __end_of_LCD_Clear 1540  
                                        __activetblptr 000002  
                                            ??_LCD_CMD 0004  
                                  setState@targetState 0017  
                                      ?_LCD_Set_Cursor 0005  
                                               _CCPR2L 000FBB  
                                        _sysBtnPolling 148E  
                                               i2l2060 0058  
                                               i2l2070 00B8  
                                               i2l2062 0068  
                                               i2l2054 000C  
                                               i2l2072 00BE  
                                               i2l2064 006E  
                                               i2l2056 0010  
                                               i2l2066 0092  
                                               i2l2058 0042  
                                               i2l2068 00A8  
                                               i2l1834 13C6  
                                               i2l1836 13EC  
                                               i2l1838 1400  
                                               _INTCON 000FF2  
                                     handleGate@isOpen 000D  
                                               _TRISD4 007CAC  
                                               _TRISC6 007CA6  
                                       i2_toggleBuzzer 13C2  
                                     handleGate@toOpen 0012  
                               __end_of_LCD_Write_Char 145C  
                            i2toggleBuzzer@isEmergency 0002  
                               __end_of_activationCode 061F  
                                               _keypad 0601  
                                               isa$std 000001  
                                    __end_of_PWM_CLOSE 0615  
                                               _pwmSet 145C  
                                     __end_of_openGate 157A  
                                     __end_of_setState 111A  
                                         __mediumconst 0000  
                                               tblptrh 000FF7  
                                               tblptrl 000FF6  
                                               tblptru 000FF8  
                                       ?_sysBtnPolling 0001  
                                      LCD_Set_Cursor@c 0005  
                                      LCD_Set_Cursor@r 0006  
                               __end_ofi2_toggleBuzzer 1410  
                                            ?_LCD_DATA 0001  
                                        _readMatchCode 0EFC  
                                           __accesstop 0080  
                              __end_of__initialization 15A2  
                                            ?_LCD_Init 0001  
                                        ___rparam_used 000001  
                            main@matchCodeResponse_431 001E  
                            main@matchCodeResponse_425 0022  
                                      ?_LCD_Write_Char 0001  
                                       __pcstackCOMRAM 0001  
                                  main@isRstBtnPressed 001D  
                               main@isRstBtnPressedPtr 002B  
                                       ?_readMatchCode 000D  
                                           ??_LCD_DATA 0003  
                                      ?i2_toggleBuzzer 0001  
                              keypadPolling@pressedKey 0008  
                                           ??_LCD_Init 0005  
                                __end_of_disableBuzzer 15B8  
                               main@isSysBtnPressedPtr 002D  
                                           _handleGate 0C16  
                                              _CCP2CON 000FBA  
                                        _keypadPolling 0D8E  
                                              ?_pwmSet 0003  
                                              _LCD_CMD 1540  
                                              _INTCON2 000FF1  
                                              _INTCON3 000FF0  
                                      ??_sysBtnPolling 0003  
                                              i2u92_40 13DA  
                                              i2u92_41 13D0  
                                              i2u94_40 13FE  
                                              i2u93_48 13DE  
                                              i2u94_41 13F8  
                                              i2u95_45 1408  
                                              i2u95_47 140A  
                                    __end_of_erPolling 14FA  
                                            ?_openGate 0001  
                                              __Hparam 0000  
                                            ?_setState 0017  
                                              __Lparam 0000  
                                    __end_of_closeGate 1596  
                                       ?_keypadPolling 0001  
                                         __psmallconst 0600  
                                              __pcinit 1596  
                                              __ramtop 0600  
                                     ??_LCD_Set_Cursor 0006  
                                              __ptext0 067C  
                                              __ptext1 148E  
                                              __ptext2 14B2  
                                              __ptext3 0EFC  
                                              __ptext4 0D8E  
                                              __ptext5 14D6  
                                              __ptext6 14FA  
                                              __ptext7 131A  
                                              __ptext8 1026  
                                              __ptext9 1374  
                             keypadPolling@keyDetected 0007  
                                            _T0CONbits 000FD5  
                                            _LCD_Clear 151E  
                                      ??_readMatchCode 0011  
                              readMatchCode@pressedKey 0015  
                                           _pirPolling 14FA  
                                 end_of_initialization 15A2  
                                    __end_of_resetCode 061A  
                                __end_of_rstBtnPolling 14D6  
                                        __Lmediumconst 0000  
                                           ??_openGate 0017  
                                           ??_setState 0019  
                                              postdec2 000FDD  
                                              postinc2 000FDE  
                                          ?_handleGate 000D  
                                            _PORTCbits 000F82  
                                            _PORTDbits 000F83  
                                           LCD_CMD@CMD 0004  
                                            _PWM_CLOSE 0613  
                                           ?_LCD_Clear 0001  
                                        ?_toggleBuzzer 0001  
                                    LCD_Write_String@i 000B  
                                     ??_LCD_Write_Char 0004  
                                          _CCP2CONbits 000FBA  
                                      ??_keypadPolling 0003  
                                  main@isSysBtnPressed 002F  
                                     _LCD_Write_String 111A  
                                       __end_of_keypad 0611  
                                       __end_of_pwmSet 148E  
                                  start_initialization 1596  
                                     ??i2_toggleBuzzer 0001  
                                          __end_of_isr 00C8  
                             readMatchCode@codeToMatch 000D  
                                       ??_toggleBuzzer 0003  
                                          ?_pirPolling 0001  
                                             ??_pwmSet 0005  
                                             ?_LCD_CMD 0001  
                                          __pbssCOMRAM 0030  
                                          ??_LCD_Clear 0005  
                                         _currentState 0034  
                                            __pintcode 0008  
                                            _gateState 0035  
                                            _erPolling 14D6  
                                            _closeGate 157A  
                                          __smallconst 0600  
                                __end_of_sysBtnPolling 14B2  
                                             _LCD_DATA 1228  
                                             _LCD_Init 11A8  
                                   handleGate@callback 000F  
                                            _resetCode 0615  
                                             i2u121_40 0040  
                                             i2u121_41 003A  
                                             i2u122_40 0056  
                                             i2u122_41 0050  
                                             i2u123_40 0090  
                                             i2u123_41 008A  
                                             i2u124_40 00A6  
                                             i2u124_41 00A0  
                                           ?_erPolling 0001  
                                         ??_handleGate 0011  
                                 __end_of_toggleBuzzer 13C2  
                                           ?_closeGate 0001  
                            readMatchCode@codePosition 0013  
                                             _PWM_OPEN 0611  
                                            main@i_423 001F  
                                            main@i_424 0025  
                                            main@i_427 0027  
                                            main@i_428 0029  
                                           pwmSet@duty 0003  
                                            fp__pwmSet 15B8  
                                __end_of_readMatchCode 1026  
                             __end_of_LCD_Write_String 11A8  
                                   __end_of_handleGate 0D8E  
                                             __Hrparam 0000  
                                             __Lrparam 0000  
                                  LCD_Write_Char@High4 0005  
                                        _disableBuzzer 15B0  
                              toggleBuzzer@isEmergency 0004  
                                             __ptext10 155E  
                                             __ptext11 157A  
                                             __ptext20 1540  
                                             __ptext12 0C16  
                                             __ptext21 1228  
                                             __ptext13 145C  
                                             __ptext14 15B0  
                                             __ptext23 13C2  
                                             __ptext15 111A  
                                             __ptext24 15B8  
                                             __ptext16 1410  
                                             __ptext17 12A8  
                                             __ptext18 151E  
                                             __ptext19 11A8  
                                         ??_pirPolling 0003  
                                main@matchCodeResponse 0021  
                                             _openGate 155E  
                                             _setState 1026  
                                       ?_disableBuzzer 0001  
                                             isa$xinst 000000  
                                          ??_erPolling 0003  
                                             int$flags 0036  
                                         _preciseTimer 0030  
                                  LCD_Set_Cursor@High4 0008  
                                __end_of_keypadPolling 0EFC  
                                          ??_closeGate 0017  
                                   __end_of_pirPolling 151E  
                                           _INTCONbits 000FF2  
                                   LCD_Write_Char@Data 0006  
                                   LCD_Write_Char@Low4 0004  
                                             intlevel2 15BA  
                                        _rstBtnPolling 14B2  
                                       keypadPolling@i 0009  
                                       keypadPolling@j 000B  
                                   LCD_Set_Cursor@Low4 0007  
                                   LCD_Set_Cursor@Temp 0009  
                                          handleGate@i 0013  
                                         LCD_DATA@Data 0003  
                                         _toggleBuzzer 1374  
                                       ?_rstBtnPolling 0001  
                                      ??_disableBuzzer 0003  
